from typing import Iterable, List, Tuple

class PerceptronixIOError(OSError): ...
class PerceptronixOpError(RuntimeError): ...

class DenseBinomialModel:
    averaged: bool = ...
    def __init__(self, nfeats: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, feats: Iterable[int]) -> bool: ...
    @classmethod
    def read(cls, filename: str) -> Tuple[DenseBinomialModel, str]: ...
    def train(self, feats: Iterable[int], label: bool) -> bool: ...
    def write(self, filename: str, metadata: str) -> None: ...

class DenseMultinomialModel:
    averaged: bool = ...
    def __init__(self, nfeats: int, nlabels: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, feats: Iterable[int]) -> int: ...
    @classmethod
    def read(cls, filename: str) -> Tuple[DenseMultinomialModel, str]: ...
    def train(self, feats: Iterable[int], label: int) -> bool: ...
    def write(self, filename: str, metadata: str) -> None: ...

class SparseBinomialModel:
    averaged: bool = ...
    def __init__(self, nlabels: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, feats: Iterable[str]) -> bool: ...
    @classmethod
    def read(cls, filename: str) -> Tuple[SparseBinomialModel, str]: ...
    def train(self, feats: Iterable[str], label: bool) -> bool: ...
    def write(self, filename: str, metadata: str) -> None: ...

class SparseBinomialSequentialModel:
    averaged: bool = ...
    def __init__(self, nfeats: int, order: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, efeats: Iterable[Iterable[str]]) -> List[bool]: ...
    @classmethod
    def read(
        cls, filename: str, order: int
    ) -> Tuple[SparseBinomialSequentialModel, str]: ...
    def train(
        self, efeats: Iterable[Iterable[str]], labels: Iterable[bool]
    ) -> int: ...
    def write(self, filename: str, metadata: str) -> None: ...

class SparseDenseMultinomialModel:
    averaged: bool = ...
    def __init__(self, nfeats: int, nlabels: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, feats: Iterable[str]) -> int: ...
    @classmethod
    def read(cls, filename: str) -> Tuple[SparseDenseMultinomialModel, str]: ...
    def train(self, feats: Iterable[str], label: int) -> bool: ...
    def write(self, filename: str, metadata: str) -> None: ...

class SparseDenseMultinomialSequentialModel:
    averaged: bool = ...
    def __init__(self, nfeats: int, nlabels: int, order: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, efeats: Iterable[Iterable[str]]) -> List[int]: ...
    @classmethod
    def read(
        cls, filename: str, order: int
    ) -> Tuple[SparseDenseMultinomialSequentialModel, str]: ...
    def train(
        self, efeats: Iterable[Iterable[str]], labels: Iterable[int]
    ) -> int: ...
    def write(self, filename: str, metadata: str) -> None: ...

class SparseMultinomialModel:
    averaged: bool = ...
    def __init__(self, nfeats: int, nlabels: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, feats: Iterable[str]) -> str: ...
    @classmethod
    def read(cls, filename: str) -> Tuple[SparseMultinomialModel, str]: ...
    def train(self, feats: Iterable[str], label: str) -> bool: ...
    def write(self, filename: str, metadata: str) -> None: ...

class SparseMultinomialSequentialModel:
    averaged: bool = ...
    def __init__(self, nfeats: int, nlabels: int, order: int) -> None: ...
    def average(self) -> None: ...
    def predict(self, efeats: Iterable[Iterable[str]]) -> List[str]: ...
    @classmethod
    def read(
        cls, filename: str, order: int
    ) -> Tuple[SparseMultinomialSequentialModel, str]: ...
    def train(
        self, efeats: Iterable[Iterable[str]], labels: List[str]
    ) -> int: ...
    def write(self, filename: str, metadata: str) -> None: ...
