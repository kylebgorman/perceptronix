// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linear_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "linear_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perceptronix {

namespace {

const ::google::protobuf::Descriptor* DenseBinomialPerceptronProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseBinomialPerceptronProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseBinomialPerceptronProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseBinomialPerceptronProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseBinomialPerceptronProto_TableEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DenseInnerTableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseInnerTableProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseInnerTableProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseInnerTableProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseInnerTableProto_TableEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DenseMultinomialPerceptronProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseMultinomialPerceptronProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseDenseMultinomialPerceptronProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseDenseMultinomialPerceptronProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseDenseMultinomialPerceptronProto_TableEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SparseMultinomialPerceptronProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseMultinomialPerceptronProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseMultinomialPerceptronProto_TableEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_linear_5fmodel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_linear_5fmodel_2eproto() {
  protobuf_AddDesc_linear_5fmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "linear_model.proto");
  GOOGLE_CHECK(file != NULL);
  DenseBinomialPerceptronProto_descriptor_ = file->message_type(0);
  static const int DenseBinomialPerceptronProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseBinomialPerceptronProto, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseBinomialPerceptronProto, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseBinomialPerceptronProto, table_),
  };
  DenseBinomialPerceptronProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DenseBinomialPerceptronProto_descriptor_,
      DenseBinomialPerceptronProto::default_instance_,
      DenseBinomialPerceptronProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseBinomialPerceptronProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(DenseBinomialPerceptronProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseBinomialPerceptronProto, _internal_metadata_),
      -1);
  SparseBinomialPerceptronProto_descriptor_ = file->message_type(1);
  static const int SparseBinomialPerceptronProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseBinomialPerceptronProto, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseBinomialPerceptronProto, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseBinomialPerceptronProto, table_),
  };
  SparseBinomialPerceptronProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparseBinomialPerceptronProto_descriptor_,
      SparseBinomialPerceptronProto::default_instance_,
      SparseBinomialPerceptronProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseBinomialPerceptronProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparseBinomialPerceptronProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseBinomialPerceptronProto, _internal_metadata_),
      -1);
  SparseBinomialPerceptronProto_TableEntry_descriptor_ = SparseBinomialPerceptronProto_descriptor_->nested_type(0);
  DenseInnerTableProto_descriptor_ = file->message_type(2);
  static const int DenseInnerTableProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseInnerTableProto, table_),
  };
  DenseInnerTableProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DenseInnerTableProto_descriptor_,
      DenseInnerTableProto::default_instance_,
      DenseInnerTableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseInnerTableProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(DenseInnerTableProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseInnerTableProto, _internal_metadata_),
      -1);
  SparseInnerTableProto_descriptor_ = file->message_type(3);
  static const int SparseInnerTableProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseInnerTableProto, table_),
  };
  SparseInnerTableProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparseInnerTableProto_descriptor_,
      SparseInnerTableProto::default_instance_,
      SparseInnerTableProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseInnerTableProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparseInnerTableProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseInnerTableProto, _internal_metadata_),
      -1);
  SparseInnerTableProto_TableEntry_descriptor_ = SparseInnerTableProto_descriptor_->nested_type(0);
  DenseMultinomialPerceptronProto_descriptor_ = file->message_type(4);
  static const int DenseMultinomialPerceptronProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseMultinomialPerceptronProto, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseMultinomialPerceptronProto, inner_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseMultinomialPerceptronProto, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseMultinomialPerceptronProto, table_),
  };
  DenseMultinomialPerceptronProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DenseMultinomialPerceptronProto_descriptor_,
      DenseMultinomialPerceptronProto::default_instance_,
      DenseMultinomialPerceptronProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseMultinomialPerceptronProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(DenseMultinomialPerceptronProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseMultinomialPerceptronProto, _internal_metadata_),
      -1);
  SparseDenseMultinomialPerceptronProto_descriptor_ = file->message_type(5);
  static const int SparseDenseMultinomialPerceptronProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseDenseMultinomialPerceptronProto, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseDenseMultinomialPerceptronProto, inner_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseDenseMultinomialPerceptronProto, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseDenseMultinomialPerceptronProto, table_),
  };
  SparseDenseMultinomialPerceptronProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparseDenseMultinomialPerceptronProto_descriptor_,
      SparseDenseMultinomialPerceptronProto::default_instance_,
      SparseDenseMultinomialPerceptronProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseDenseMultinomialPerceptronProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparseDenseMultinomialPerceptronProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseDenseMultinomialPerceptronProto, _internal_metadata_),
      -1);
  SparseDenseMultinomialPerceptronProto_TableEntry_descriptor_ = SparseDenseMultinomialPerceptronProto_descriptor_->nested_type(0);
  SparseMultinomialPerceptronProto_descriptor_ = file->message_type(6);
  static const int SparseMultinomialPerceptronProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMultinomialPerceptronProto, metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMultinomialPerceptronProto, inner_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMultinomialPerceptronProto, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMultinomialPerceptronProto, table_),
  };
  SparseMultinomialPerceptronProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SparseMultinomialPerceptronProto_descriptor_,
      SparseMultinomialPerceptronProto::default_instance_,
      SparseMultinomialPerceptronProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMultinomialPerceptronProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(SparseMultinomialPerceptronProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMultinomialPerceptronProto, _internal_metadata_),
      -1);
  SparseMultinomialPerceptronProto_TableEntry_descriptor_ = SparseMultinomialPerceptronProto_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_linear_5fmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DenseBinomialPerceptronProto_descriptor_, &DenseBinomialPerceptronProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparseBinomialPerceptronProto_descriptor_, &SparseBinomialPerceptronProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SparseBinomialPerceptronProto_TableEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                SparseBinomialPerceptronProto_TableEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DenseInnerTableProto_descriptor_, &DenseInnerTableProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparseInnerTableProto_descriptor_, &SparseInnerTableProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SparseInnerTableProto_TableEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            float,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
            0>::CreateDefaultInstance(
                SparseInnerTableProto_TableEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DenseMultinomialPerceptronProto_descriptor_, &DenseMultinomialPerceptronProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparseDenseMultinomialPerceptronProto_descriptor_, &SparseDenseMultinomialPerceptronProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SparseDenseMultinomialPerceptronProto_TableEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::perceptronix::DenseInnerTableProto,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                SparseDenseMultinomialPerceptronProto_TableEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SparseMultinomialPerceptronProto_descriptor_, &SparseMultinomialPerceptronProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SparseMultinomialPerceptronProto_TableEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::perceptronix::SparseInnerTableProto,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                SparseMultinomialPerceptronProto_TableEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_linear_5fmodel_2eproto() {
  delete DenseBinomialPerceptronProto::default_instance_;
  delete DenseBinomialPerceptronProto_reflection_;
  delete SparseBinomialPerceptronProto::default_instance_;
  delete SparseBinomialPerceptronProto_reflection_;
  delete DenseInnerTableProto::default_instance_;
  delete DenseInnerTableProto_reflection_;
  delete SparseInnerTableProto::default_instance_;
  delete SparseInnerTableProto_reflection_;
  delete DenseMultinomialPerceptronProto::default_instance_;
  delete DenseMultinomialPerceptronProto_reflection_;
  delete SparseDenseMultinomialPerceptronProto::default_instance_;
  delete SparseDenseMultinomialPerceptronProto_reflection_;
  delete SparseMultinomialPerceptronProto::default_instance_;
  delete SparseMultinomialPerceptronProto_reflection_;
}

void protobuf_AddDesc_linear_5fmodel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_linear_5fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022linear_model.proto\022\014perceptronix\"O\n\034De"
    "nseBinomialPerceptronProto\022\022\n\010metadata\030\001"
    " \001(\t:\000\022\014\n\004bias\030\002 \002(\002\022\r\n\005table\030\003 \003(\002\"\266\001\n\035"
    "SparseBinomialPerceptronProto\022\022\n\010metadat"
    "a\030\001 \001(\t:\000\022\014\n\004bias\030\002 \002(\002\022E\n\005table\030\003 \003(\01326"
    ".perceptronix.SparseBinomialPerceptronPr"
    "oto.TableEntry\032,\n\nTableEntry\022\013\n\003key\030\001 \001("
    "\t\022\r\n\005value\030\002 \001(\002:\0028\001\"%\n\024DenseInnerTableP"
    "roto\022\r\n\005table\030\001 \003(\002\"\204\001\n\025SparseInnerTable"
    "Proto\022=\n\005table\030\001 \003(\0132..perceptronix.Spar"
    "seInnerTableProto.TableEntry\032,\n\nTableEnt"
    "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\256\001\n\037D"
    "enseMultinomialPerceptronProto\022\022\n\010metada"
    "ta\030\001 \001(\t:\000\022\022\n\ninner_size\030\002 \002(\r\0220\n\004bias\030\003"
    " \002(\0132\".perceptronix.DenseInnerTableProto"
    "\0221\n\005table\030\004 \003(\0132\".perceptronix.DenseInne"
    "rTableProto\"\242\002\n%SparseDenseMultinomialPe"
    "rceptronProto\022\022\n\010metadata\030\001 \001(\t:\000\022\022\n\ninn"
    "er_size\030\002 \002(\r\0220\n\004bias\030\003 \002(\0132\".perceptron"
    "ix.DenseInnerTableProto\022M\n\005table\030\004 \003(\0132>"
    ".perceptronix.SparseDenseMultinomialPerc"
    "eptronProto.TableEntry\032P\n\nTableEntry\022\013\n\003"
    "key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".perceptronix."
    "DenseInnerTableProto:\0028\001\"\232\002\n SparseMulti"
    "nomialPerceptronProto\022\022\n\010metadata\030\001 \001(\t:"
    "\000\022\022\n\ninner_size\030\002 \002(\r\0221\n\004bias\030\003 \002(\0132#.pe"
    "rceptronix.SparseInnerTableProto\022H\n\005tabl"
    "e\030\004 \003(\01329.perceptronix.SparseMultinomial"
    "PerceptronProto.TableEntry\032Q\n\nTableEntry"
    "\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.perceptro"
    "nix.SparseInnerTableProto:\0028\001", 1229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "linear_model.proto", &protobuf_RegisterTypes);
  DenseBinomialPerceptronProto::default_instance_ = new DenseBinomialPerceptronProto();
  SparseBinomialPerceptronProto::default_instance_ = new SparseBinomialPerceptronProto();
  DenseInnerTableProto::default_instance_ = new DenseInnerTableProto();
  SparseInnerTableProto::default_instance_ = new SparseInnerTableProto();
  DenseMultinomialPerceptronProto::default_instance_ = new DenseMultinomialPerceptronProto();
  SparseDenseMultinomialPerceptronProto::default_instance_ = new SparseDenseMultinomialPerceptronProto();
  SparseMultinomialPerceptronProto::default_instance_ = new SparseMultinomialPerceptronProto();
  DenseBinomialPerceptronProto::default_instance_->InitAsDefaultInstance();
  SparseBinomialPerceptronProto::default_instance_->InitAsDefaultInstance();
  DenseInnerTableProto::default_instance_->InitAsDefaultInstance();
  SparseInnerTableProto::default_instance_->InitAsDefaultInstance();
  DenseMultinomialPerceptronProto::default_instance_->InitAsDefaultInstance();
  SparseDenseMultinomialPerceptronProto::default_instance_->InitAsDefaultInstance();
  SparseMultinomialPerceptronProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_linear_5fmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_linear_5fmodel_2eproto {
  StaticDescriptorInitializer_linear_5fmodel_2eproto() {
    protobuf_AddDesc_linear_5fmodel_2eproto();
  }
} static_descriptor_initializer_linear_5fmodel_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DenseBinomialPerceptronProto::kMetadataFieldNumber;
const int DenseBinomialPerceptronProto::kBiasFieldNumber;
const int DenseBinomialPerceptronProto::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DenseBinomialPerceptronProto::DenseBinomialPerceptronProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.DenseBinomialPerceptronProto)
}

void DenseBinomialPerceptronProto::InitAsDefaultInstance() {
}

DenseBinomialPerceptronProto::DenseBinomialPerceptronProto(const DenseBinomialPerceptronProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perceptronix.DenseBinomialPerceptronProto)
}

void DenseBinomialPerceptronProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bias_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseBinomialPerceptronProto::~DenseBinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.DenseBinomialPerceptronProto)
  SharedDtor();
}

void DenseBinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DenseBinomialPerceptronProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseBinomialPerceptronProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseBinomialPerceptronProto_descriptor_;
}

const DenseBinomialPerceptronProto& DenseBinomialPerceptronProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fmodel_2eproto();
  return *default_instance_;
}

DenseBinomialPerceptronProto* DenseBinomialPerceptronProto::default_instance_ = NULL;

DenseBinomialPerceptronProto* DenseBinomialPerceptronProto::New(::google::protobuf::Arena* arena) const {
  DenseBinomialPerceptronProto* n = new DenseBinomialPerceptronProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DenseBinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.DenseBinomialPerceptronProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_metadata()) {
      metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bias_ = 0;
  }
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DenseBinomialPerceptronProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.DenseBinomialPerceptronProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.DenseBinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_bias;
        break;
      }

      // required float bias = 2;
      case 2: {
        if (tag == 21) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_table;
        break;
      }

      // repeated float table = 3;
      case 3: {
        if (tag == 29) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_table())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_table())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_table;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.DenseBinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.DenseBinomialPerceptronProto)
  return false;
#undef DO_
}

void DenseBinomialPerceptronProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.DenseBinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseBinomialPerceptronProto.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required float bias = 2;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bias(), output);
  }

  // repeated float table = 3;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->table(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.DenseBinomialPerceptronProto)
}

::google::protobuf::uint8* DenseBinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.DenseBinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseBinomialPerceptronProto.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required float bias = 2;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bias(), target);
  }

  // repeated float table = 3;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->table(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.DenseBinomialPerceptronProto)
  return target;
}

int DenseBinomialPerceptronProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.DenseBinomialPerceptronProto)
  int total_size = 0;

  // required float bias = 2;
  if (has_bias()) {
    total_size += 1 + 4;
  }
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // repeated float table = 3;
  {
    int data_size = 0;
    data_size = 4 * this->table_size();
    total_size += 1 * this->table_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseBinomialPerceptronProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.DenseBinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DenseBinomialPerceptronProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DenseBinomialPerceptronProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.DenseBinomialPerceptronProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.DenseBinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void DenseBinomialPerceptronProto::MergeFrom(const DenseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.DenseBinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DenseBinomialPerceptronProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.DenseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseBinomialPerceptronProto::CopyFrom(const DenseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.DenseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseBinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void DenseBinomialPerceptronProto::Swap(DenseBinomialPerceptronProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DenseBinomialPerceptronProto::InternalSwap(DenseBinomialPerceptronProto* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(bias_, other->bias_);
  table_.UnsafeArenaSwap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DenseBinomialPerceptronProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseBinomialPerceptronProto_descriptor_;
  metadata.reflection = DenseBinomialPerceptronProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseBinomialPerceptronProto

// optional string metadata = 1 [default = ""];
bool DenseBinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DenseBinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void DenseBinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void DenseBinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
 const ::std::string& DenseBinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DenseBinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.metadata)
}
 void DenseBinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.DenseBinomialPerceptronProto.metadata)
}
 void DenseBinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.DenseBinomialPerceptronProto.metadata)
}
 ::std::string* DenseBinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseBinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DenseBinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseBinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DenseBinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseBinomialPerceptronProto.metadata)
}

// required float bias = 2;
bool DenseBinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DenseBinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000002u;
}
void DenseBinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000002u;
}
void DenseBinomialPerceptronProto::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
 float DenseBinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.bias)
  return bias_;
}
 void DenseBinomialPerceptronProto::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.bias)
}

// repeated float table = 3;
int DenseBinomialPerceptronProto::table_size() const {
  return table_.size();
}
void DenseBinomialPerceptronProto::clear_table() {
  table_.Clear();
}
 float DenseBinomialPerceptronProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.table)
  return table_.Get(index);
}
 void DenseBinomialPerceptronProto::set_table(int index, float value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.table)
}
 void DenseBinomialPerceptronProto::add_table(float value) {
  table_.Add(value);
  // @@protoc_insertion_point(field_add:perceptronix.DenseBinomialPerceptronProto.table)
}
 const ::google::protobuf::RepeatedField< float >&
DenseBinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseBinomialPerceptronProto.table)
  return table_;
}
 ::google::protobuf::RepeatedField< float >*
DenseBinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseBinomialPerceptronProto.table)
  return &table_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseBinomialPerceptronProto::kMetadataFieldNumber;
const int SparseBinomialPerceptronProto::kBiasFieldNumber;
const int SparseBinomialPerceptronProto::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseBinomialPerceptronProto::SparseBinomialPerceptronProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseBinomialPerceptronProto)
}

void SparseBinomialPerceptronProto::InitAsDefaultInstance() {
}

SparseBinomialPerceptronProto::SparseBinomialPerceptronProto(const SparseBinomialPerceptronProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseBinomialPerceptronProto)
}

void SparseBinomialPerceptronProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bias_ = 0;
  table_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  table_.SetEntryDescriptor(
      &::perceptronix::SparseBinomialPerceptronProto_TableEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseBinomialPerceptronProto::~SparseBinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseBinomialPerceptronProto)
  SharedDtor();
}

void SparseBinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SparseBinomialPerceptronProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseBinomialPerceptronProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseBinomialPerceptronProto_descriptor_;
}

const SparseBinomialPerceptronProto& SparseBinomialPerceptronProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fmodel_2eproto();
  return *default_instance_;
}

SparseBinomialPerceptronProto* SparseBinomialPerceptronProto::default_instance_ = NULL;

SparseBinomialPerceptronProto* SparseBinomialPerceptronProto::New(::google::protobuf::Arena* arena) const {
  SparseBinomialPerceptronProto* n = new SparseBinomialPerceptronProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparseBinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseBinomialPerceptronProto)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_metadata()) {
      metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bias_ = 0;
  }
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparseBinomialPerceptronProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseBinomialPerceptronProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.SparseBinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_bias;
        break;
      }

      // required float bias = 2;
      case 2: {
        if (tag == 21) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table;
        break;
      }

      // map<string, float> table = 3;
      case 3: {
        if (tag == 26) {
         parse_table:
          DO_(input->IncrementRecursionDepth());
         parse_loop_table:
          SparseBinomialPerceptronProto_TableEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&table_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.SparseBinomialPerceptronProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_table;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseBinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseBinomialPerceptronProto)
  return false;
#undef DO_
}

void SparseBinomialPerceptronProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseBinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseBinomialPerceptronProto.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required float bias = 2;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bias(), output);
  }

  // map<string, float> table = 3;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseBinomialPerceptronProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseBinomialPerceptronProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseBinomialPerceptronProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseBinomialPerceptronProto)
}

::google::protobuf::uint8* SparseBinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseBinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseBinomialPerceptronProto.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required float bias = 2;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bias(), target);
  }

  // map<string, float> table = 3;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseBinomialPerceptronProto.TableEntry.key");
      }
    };

    if (deterministic &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseBinomialPerceptronProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseBinomialPerceptronProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseBinomialPerceptronProto)
  return target;
}

int SparseBinomialPerceptronProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseBinomialPerceptronProto)
  int total_size = 0;

  // required float bias = 2;
  if (has_bias()) {
    total_size += 1 + 4;
  }
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // map<string, float> table = 3;
  total_size += 1 * this->table_size();
  {
    ::google::protobuf::scoped_ptr<SparseBinomialPerceptronProto_TableEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->table().begin();
        it != this->table().end(); ++it) {
      entry.reset(table_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseBinomialPerceptronProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseBinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparseBinomialPerceptronProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseBinomialPerceptronProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseBinomialPerceptronProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseBinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void SparseBinomialPerceptronProto::MergeFrom(const SparseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseBinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparseBinomialPerceptronProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseBinomialPerceptronProto::CopyFrom(const SparseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseBinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void SparseBinomialPerceptronProto::Swap(SparseBinomialPerceptronProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparseBinomialPerceptronProto::InternalSwap(SparseBinomialPerceptronProto* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(bias_, other->bias_);
  table_.Swap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseBinomialPerceptronProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseBinomialPerceptronProto_descriptor_;
  metadata.reflection = SparseBinomialPerceptronProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseBinomialPerceptronProto

// optional string metadata = 1 [default = ""];
bool SparseBinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparseBinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void SparseBinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparseBinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
 const ::std::string& SparseBinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseBinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SparseBinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseBinomialPerceptronProto.metadata)
}
 void SparseBinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseBinomialPerceptronProto.metadata)
}
 void SparseBinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseBinomialPerceptronProto.metadata)
}
 ::std::string* SparseBinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseBinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SparseBinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseBinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SparseBinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseBinomialPerceptronProto.metadata)
}

// required float bias = 2;
bool SparseBinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SparseBinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000002u;
}
void SparseBinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000002u;
}
void SparseBinomialPerceptronProto::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
 float SparseBinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseBinomialPerceptronProto.bias)
  return bias_;
}
 void SparseBinomialPerceptronProto::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.SparseBinomialPerceptronProto.bias)
}

// map<string, float> table = 3;
int SparseBinomialPerceptronProto::table_size() const {
  return table_.size();
}
void SparseBinomialPerceptronProto::clear_table() {
  table_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
SparseBinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseBinomialPerceptronProto.table)
  return table_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
SparseBinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseBinomialPerceptronProto.table)
  return table_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DenseInnerTableProto::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DenseInnerTableProto::DenseInnerTableProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.DenseInnerTableProto)
}

void DenseInnerTableProto::InitAsDefaultInstance() {
}

DenseInnerTableProto::DenseInnerTableProto(const DenseInnerTableProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perceptronix.DenseInnerTableProto)
}

void DenseInnerTableProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseInnerTableProto::~DenseInnerTableProto() {
  // @@protoc_insertion_point(destructor:perceptronix.DenseInnerTableProto)
  SharedDtor();
}

void DenseInnerTableProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DenseInnerTableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseInnerTableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseInnerTableProto_descriptor_;
}

const DenseInnerTableProto& DenseInnerTableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fmodel_2eproto();
  return *default_instance_;
}

DenseInnerTableProto* DenseInnerTableProto::default_instance_ = NULL;

DenseInnerTableProto* DenseInnerTableProto::New(::google::protobuf::Arena* arena) const {
  DenseInnerTableProto* n = new DenseInnerTableProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DenseInnerTableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.DenseInnerTableProto)
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DenseInnerTableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.DenseInnerTableProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float table = 1;
      case 1: {
        if (tag == 13) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_table())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_table())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_table;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.DenseInnerTableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.DenseInnerTableProto)
  return false;
#undef DO_
}

void DenseInnerTableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.DenseInnerTableProto)
  // repeated float table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->table(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.DenseInnerTableProto)
}

::google::protobuf::uint8* DenseInnerTableProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.DenseInnerTableProto)
  // repeated float table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->table(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.DenseInnerTableProto)
  return target;
}

int DenseInnerTableProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.DenseInnerTableProto)
  int total_size = 0;

  // repeated float table = 1;
  {
    int data_size = 0;
    data_size = 4 * this->table_size();
    total_size += 1 * this->table_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseInnerTableProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.DenseInnerTableProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DenseInnerTableProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DenseInnerTableProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.DenseInnerTableProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.DenseInnerTableProto)
    MergeFrom(*source);
  }
}

void DenseInnerTableProto::MergeFrom(const DenseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.DenseInnerTableProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DenseInnerTableProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.DenseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseInnerTableProto::CopyFrom(const DenseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.DenseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseInnerTableProto::IsInitialized() const {

  return true;
}

void DenseInnerTableProto::Swap(DenseInnerTableProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DenseInnerTableProto::InternalSwap(DenseInnerTableProto* other) {
  table_.UnsafeArenaSwap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DenseInnerTableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseInnerTableProto_descriptor_;
  metadata.reflection = DenseInnerTableProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseInnerTableProto

// repeated float table = 1;
int DenseInnerTableProto::table_size() const {
  return table_.size();
}
void DenseInnerTableProto::clear_table() {
  table_.Clear();
}
 float DenseInnerTableProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseInnerTableProto.table)
  return table_.Get(index);
}
 void DenseInnerTableProto::set_table(int index, float value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseInnerTableProto.table)
}
 void DenseInnerTableProto::add_table(float value) {
  table_.Add(value);
  // @@protoc_insertion_point(field_add:perceptronix.DenseInnerTableProto.table)
}
 const ::google::protobuf::RepeatedField< float >&
DenseInnerTableProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseInnerTableProto.table)
  return table_;
}
 ::google::protobuf::RepeatedField< float >*
DenseInnerTableProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseInnerTableProto.table)
  return &table_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseInnerTableProto::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseInnerTableProto::SparseInnerTableProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseInnerTableProto)
}

void SparseInnerTableProto::InitAsDefaultInstance() {
}

SparseInnerTableProto::SparseInnerTableProto(const SparseInnerTableProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseInnerTableProto)
}

void SparseInnerTableProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  table_.SetEntryDescriptor(
      &::perceptronix::SparseInnerTableProto_TableEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseInnerTableProto::~SparseInnerTableProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseInnerTableProto)
  SharedDtor();
}

void SparseInnerTableProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparseInnerTableProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseInnerTableProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseInnerTableProto_descriptor_;
}

const SparseInnerTableProto& SparseInnerTableProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fmodel_2eproto();
  return *default_instance_;
}

SparseInnerTableProto* SparseInnerTableProto::default_instance_ = NULL;

SparseInnerTableProto* SparseInnerTableProto::New(::google::protobuf::Arena* arena) const {
  SparseInnerTableProto* n = new SparseInnerTableProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparseInnerTableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseInnerTableProto)
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparseInnerTableProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseInnerTableProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, float> table = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_table:
          SparseInnerTableProto_TableEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, float,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::google::protobuf::Map< ::std::string, float > > parser(&table_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.SparseInnerTableProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_table;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseInnerTableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseInnerTableProto)
  return false;
#undef DO_
}

void SparseInnerTableProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseInnerTableProto)
  // map<string, float> table = 1;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseInnerTableProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseInnerTableProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseInnerTableProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseInnerTableProto)
}

::google::protobuf::uint8* SparseInnerTableProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseInnerTableProto)
  // map<string, float> table = 1;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseInnerTableProto.TableEntry.key");
      }
    };

    if (deterministic &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, float >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseInnerTableProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseInnerTableProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseInnerTableProto)
  return target;
}

int SparseInnerTableProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseInnerTableProto)
  int total_size = 0;

  // map<string, float> table = 1;
  total_size += 1 * this->table_size();
  {
    ::google::protobuf::scoped_ptr<SparseInnerTableProto_TableEntry> entry;
    for (::google::protobuf::Map< ::std::string, float >::const_iterator
        it = this->table().begin();
        it != this->table().end(); ++it) {
      entry.reset(table_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseInnerTableProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseInnerTableProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparseInnerTableProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseInnerTableProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseInnerTableProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseInnerTableProto)
    MergeFrom(*source);
  }
}

void SparseInnerTableProto::MergeFrom(const SparseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseInnerTableProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparseInnerTableProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseInnerTableProto::CopyFrom(const SparseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseInnerTableProto::IsInitialized() const {

  return true;
}

void SparseInnerTableProto::Swap(SparseInnerTableProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparseInnerTableProto::InternalSwap(SparseInnerTableProto* other) {
  table_.Swap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseInnerTableProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseInnerTableProto_descriptor_;
  metadata.reflection = SparseInnerTableProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseInnerTableProto

// map<string, float> table = 1;
int SparseInnerTableProto::table_size() const {
  return table_.size();
}
void SparseInnerTableProto::clear_table() {
  table_.Clear();
}
 const ::google::protobuf::Map< ::std::string, float >&
SparseInnerTableProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseInnerTableProto.table)
  return table_.GetMap();
}
 ::google::protobuf::Map< ::std::string, float >*
SparseInnerTableProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseInnerTableProto.table)
  return table_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DenseMultinomialPerceptronProto::kMetadataFieldNumber;
const int DenseMultinomialPerceptronProto::kInnerSizeFieldNumber;
const int DenseMultinomialPerceptronProto::kBiasFieldNumber;
const int DenseMultinomialPerceptronProto::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DenseMultinomialPerceptronProto::DenseMultinomialPerceptronProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.DenseMultinomialPerceptronProto)
}

void DenseMultinomialPerceptronProto::InitAsDefaultInstance() {
  bias_ = const_cast< ::perceptronix::DenseInnerTableProto*>(&::perceptronix::DenseInnerTableProto::default_instance());
}

DenseMultinomialPerceptronProto::DenseMultinomialPerceptronProto(const DenseMultinomialPerceptronProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perceptronix.DenseMultinomialPerceptronProto)
}

void DenseMultinomialPerceptronProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_size_ = 0u;
  bias_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseMultinomialPerceptronProto::~DenseMultinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.DenseMultinomialPerceptronProto)
  SharedDtor();
}

void DenseMultinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete bias_;
  }
}

void DenseMultinomialPerceptronProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseMultinomialPerceptronProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseMultinomialPerceptronProto_descriptor_;
}

const DenseMultinomialPerceptronProto& DenseMultinomialPerceptronProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fmodel_2eproto();
  return *default_instance_;
}

DenseMultinomialPerceptronProto* DenseMultinomialPerceptronProto::default_instance_ = NULL;

DenseMultinomialPerceptronProto* DenseMultinomialPerceptronProto::New(::google::protobuf::Arena* arena) const {
  DenseMultinomialPerceptronProto* n = new DenseMultinomialPerceptronProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DenseMultinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.DenseMultinomialPerceptronProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_metadata()) {
      metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inner_size_ = 0u;
    if (has_bias()) {
      if (bias_ != NULL) bias_->::perceptronix::DenseInnerTableProto::Clear();
    }
  }
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DenseMultinomialPerceptronProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.DenseMultinomialPerceptronProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.DenseMultinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inner_size;
        break;
      }

      // required uint32 inner_size = 2;
      case 2: {
        if (tag == 16) {
         parse_inner_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_size_)));
          set_has_inner_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bias;
        break;
      }

      // required .perceptronix.DenseInnerTableProto bias = 3;
      case 3: {
        if (tag == 26) {
         parse_bias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_table;
        break;
      }

      // repeated .perceptronix.DenseInnerTableProto table = 4;
      case 4: {
        if (tag == 34) {
         parse_table:
          DO_(input->IncrementRecursionDepth());
         parse_loop_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_table;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.DenseMultinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.DenseMultinomialPerceptronProto)
  return false;
#undef DO_
}

void DenseMultinomialPerceptronProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.DenseMultinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseMultinomialPerceptronProto.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required uint32 inner_size = 2;
  if (has_inner_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inner_size(), output);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bias_, output);
  }

  // repeated .perceptronix.DenseInnerTableProto table = 4;
  for (unsigned int i = 0, n = this->table_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->table(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.DenseMultinomialPerceptronProto)
}

::google::protobuf::uint8* DenseMultinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.DenseMultinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseMultinomialPerceptronProto.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required uint32 inner_size = 2;
  if (has_inner_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_size(), target);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bias_, false, target);
  }

  // repeated .perceptronix.DenseInnerTableProto table = 4;
  for (unsigned int i = 0, n = this->table_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->table(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.DenseMultinomialPerceptronProto)
  return target;
}

int DenseMultinomialPerceptronProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:perceptronix.DenseMultinomialPerceptronProto)
  int total_size = 0;

  if (has_inner_size()) {
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_size());
  }

  if (has_bias()) {
    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_);
  }

  return total_size;
}
int DenseMultinomialPerceptronProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.DenseMultinomialPerceptronProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_size());

    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // repeated .perceptronix.DenseInnerTableProto table = 4;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseMultinomialPerceptronProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.DenseMultinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DenseMultinomialPerceptronProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DenseMultinomialPerceptronProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.DenseMultinomialPerceptronProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.DenseMultinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void DenseMultinomialPerceptronProto::MergeFrom(const DenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.DenseMultinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (from.has_inner_size()) {
      set_inner_size(from.inner_size());
    }
    if (from.has_bias()) {
      mutable_bias()->::perceptronix::DenseInnerTableProto::MergeFrom(from.bias());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DenseMultinomialPerceptronProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.DenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseMultinomialPerceptronProto::CopyFrom(const DenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.DenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseMultinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void DenseMultinomialPerceptronProto::Swap(DenseMultinomialPerceptronProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DenseMultinomialPerceptronProto::InternalSwap(DenseMultinomialPerceptronProto* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(inner_size_, other->inner_size_);
  std::swap(bias_, other->bias_);
  table_.UnsafeArenaSwap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DenseMultinomialPerceptronProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseMultinomialPerceptronProto_descriptor_;
  metadata.reflection = DenseMultinomialPerceptronProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
bool DenseMultinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DenseMultinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void DenseMultinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void DenseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
 const ::std::string& DenseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DenseMultinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
 void DenseMultinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
 void DenseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
 ::std::string* DenseMultinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DenseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseMultinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DenseMultinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
bool DenseMultinomialPerceptronProto::has_inner_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DenseMultinomialPerceptronProto::set_has_inner_size() {
  _has_bits_[0] |= 0x00000002u;
}
void DenseMultinomialPerceptronProto::clear_has_inner_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void DenseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  clear_has_inner_size();
}
 ::google::protobuf::uint32 DenseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.inner_size)
  return inner_size_;
}
 void DenseMultinomialPerceptronProto::set_inner_size(::google::protobuf::uint32 value) {
  set_has_inner_size();
  inner_size_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.DenseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.DenseInnerTableProto bias = 3;
bool DenseMultinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DenseMultinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
void DenseMultinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
void DenseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != NULL) bias_->::perceptronix::DenseInnerTableProto::Clear();
  clear_has_bias();
}
const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.bias)
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) {
    bias_ = new ::perceptronix::DenseInnerTableProto;
  }
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.bias)
  return bias_;
}
::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseMultinomialPerceptronProto.bias)
  clear_has_bias();
  ::perceptronix::DenseInnerTableProto* temp = bias_;
  bias_ = NULL;
  return temp;
}
void DenseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::DenseInnerTableProto* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    set_has_bias();
  } else {
    clear_has_bias();
  }
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseMultinomialPerceptronProto.bias)
}

// repeated .perceptronix.DenseInnerTableProto table = 4;
int DenseMultinomialPerceptronProto::table_size() const {
  return table_.size();
}
void DenseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_.Get(index);
}
::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_.Mutable(index);
}
::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::add_table() {
  // @@protoc_insertion_point(field_add:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_.Add();
}
::google::protobuf::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >*
DenseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseMultinomialPerceptronProto.table)
  return &table_;
}
const ::google::protobuf::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >&
DenseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseDenseMultinomialPerceptronProto::kMetadataFieldNumber;
const int SparseDenseMultinomialPerceptronProto::kInnerSizeFieldNumber;
const int SparseDenseMultinomialPerceptronProto::kBiasFieldNumber;
const int SparseDenseMultinomialPerceptronProto::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseDenseMultinomialPerceptronProto::SparseDenseMultinomialPerceptronProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseDenseMultinomialPerceptronProto)
}

void SparseDenseMultinomialPerceptronProto::InitAsDefaultInstance() {
  bias_ = const_cast< ::perceptronix::DenseInnerTableProto*>(&::perceptronix::DenseInnerTableProto::default_instance());
}

SparseDenseMultinomialPerceptronProto::SparseDenseMultinomialPerceptronProto(const SparseDenseMultinomialPerceptronProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseDenseMultinomialPerceptronProto)
}

void SparseDenseMultinomialPerceptronProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_size_ = 0u;
  bias_ = NULL;
  table_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  table_.SetEntryDescriptor(
      &::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseDenseMultinomialPerceptronProto::~SparseDenseMultinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseDenseMultinomialPerceptronProto)
  SharedDtor();
}

void SparseDenseMultinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete bias_;
  }
}

void SparseDenseMultinomialPerceptronProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseDenseMultinomialPerceptronProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseDenseMultinomialPerceptronProto_descriptor_;
}

const SparseDenseMultinomialPerceptronProto& SparseDenseMultinomialPerceptronProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fmodel_2eproto();
  return *default_instance_;
}

SparseDenseMultinomialPerceptronProto* SparseDenseMultinomialPerceptronProto::default_instance_ = NULL;

SparseDenseMultinomialPerceptronProto* SparseDenseMultinomialPerceptronProto::New(::google::protobuf::Arena* arena) const {
  SparseDenseMultinomialPerceptronProto* n = new SparseDenseMultinomialPerceptronProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparseDenseMultinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_metadata()) {
      metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inner_size_ = 0u;
    if (has_bias()) {
      if (bias_ != NULL) bias_->::perceptronix::DenseInnerTableProto::Clear();
    }
  }
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparseDenseMultinomialPerceptronProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.SparseDenseMultinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inner_size;
        break;
      }

      // required uint32 inner_size = 2;
      case 2: {
        if (tag == 16) {
         parse_inner_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_size_)));
          set_has_inner_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bias;
        break;
      }

      // required .perceptronix.DenseInnerTableProto bias = 3;
      case 3: {
        if (tag == 26) {
         parse_bias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_table;
        break;
      }

      // map<string, .perceptronix.DenseInnerTableProto> table = 4;
      case 4: {
        if (tag == 34) {
         parse_table:
          DO_(input->IncrementRecursionDepth());
         parse_loop_table:
          SparseDenseMultinomialPerceptronProto_TableEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::perceptronix::DenseInnerTableProto,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto > > parser(&table_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.SparseDenseMultinomialPerceptronProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_table;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseDenseMultinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseDenseMultinomialPerceptronProto)
  return false;
#undef DO_
}

void SparseDenseMultinomialPerceptronProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseDenseMultinomialPerceptronProto.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required uint32 inner_size = 2;
  if (has_inner_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inner_size(), output);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bias_, output);
  }

  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseDenseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseDenseMultinomialPerceptronProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseDenseMultinomialPerceptronProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseDenseMultinomialPerceptronProto)
}

::google::protobuf::uint8* SparseDenseMultinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseDenseMultinomialPerceptronProto.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required uint32 inner_size = 2;
  if (has_inner_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_size(), target);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bias_, false, target);
  }

  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseDenseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (deterministic &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseDenseMultinomialPerceptronProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseDenseMultinomialPerceptronProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseDenseMultinomialPerceptronProto)
  return target;
}

int SparseDenseMultinomialPerceptronProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  int total_size = 0;

  if (has_inner_size()) {
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_size());
  }

  if (has_bias()) {
    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_);
  }

  return total_size;
}
int SparseDenseMultinomialPerceptronProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_size());

    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  total_size += 1 * this->table_size();
  {
    ::google::protobuf::scoped_ptr<SparseDenseMultinomialPerceptronProto_TableEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
        it = this->table().begin();
        it != this->table().end(); ++it) {
      entry.reset(table_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseDenseMultinomialPerceptronProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparseDenseMultinomialPerceptronProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseDenseMultinomialPerceptronProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseDenseMultinomialPerceptronProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseDenseMultinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void SparseDenseMultinomialPerceptronProto::MergeFrom(const SparseDenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (from.has_inner_size()) {
      set_inner_size(from.inner_size());
    }
    if (from.has_bias()) {
      mutable_bias()->::perceptronix::DenseInnerTableProto::MergeFrom(from.bias());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparseDenseMultinomialPerceptronProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseDenseMultinomialPerceptronProto::CopyFrom(const SparseDenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseDenseMultinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void SparseDenseMultinomialPerceptronProto::Swap(SparseDenseMultinomialPerceptronProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparseDenseMultinomialPerceptronProto::InternalSwap(SparseDenseMultinomialPerceptronProto* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(inner_size_, other->inner_size_);
  std::swap(bias_, other->bias_);
  table_.Swap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseDenseMultinomialPerceptronProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseDenseMultinomialPerceptronProto_descriptor_;
  metadata.reflection = SparseDenseMultinomialPerceptronProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseDenseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
bool SparseDenseMultinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparseDenseMultinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void SparseDenseMultinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparseDenseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
 const ::std::string& SparseDenseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SparseDenseMultinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
 void SparseDenseMultinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
 void SparseDenseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
 ::std::string* SparseDenseMultinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SparseDenseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SparseDenseMultinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
bool SparseDenseMultinomialPerceptronProto::has_inner_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SparseDenseMultinomialPerceptronProto::set_has_inner_size() {
  _has_bits_[0] |= 0x00000002u;
}
void SparseDenseMultinomialPerceptronProto::clear_has_inner_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void SparseDenseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  clear_has_inner_size();
}
 ::google::protobuf::uint32 SparseDenseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.inner_size)
  return inner_size_;
}
 void SparseDenseMultinomialPerceptronProto::set_inner_size(::google::protobuf::uint32 value) {
  set_has_inner_size();
  inner_size_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.SparseDenseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.DenseInnerTableProto bias = 3;
bool SparseDenseMultinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SparseDenseMultinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
void SparseDenseMultinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
void SparseDenseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != NULL) bias_->::perceptronix::DenseInnerTableProto::Clear();
  clear_has_bias();
}
const ::perceptronix::DenseInnerTableProto& SparseDenseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
::perceptronix::DenseInnerTableProto* SparseDenseMultinomialPerceptronProto::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) {
    bias_ = new ::perceptronix::DenseInnerTableProto;
  }
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  return bias_;
}
::perceptronix::DenseInnerTableProto* SparseDenseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  clear_has_bias();
  ::perceptronix::DenseInnerTableProto* temp = bias_;
  bias_ = NULL;
  return temp;
}
void SparseDenseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::DenseInnerTableProto* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    set_has_bias();
  } else {
    clear_has_bias();
  }
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
}

// map<string, .perceptronix.DenseInnerTableProto> table = 4;
int SparseDenseMultinomialPerceptronProto::table_size() const {
  return table_.size();
}
void SparseDenseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >&
SparseDenseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseDenseMultinomialPerceptronProto.table)
  return table_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >*
SparseDenseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseDenseMultinomialPerceptronProto.table)
  return table_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SparseMultinomialPerceptronProto::kMetadataFieldNumber;
const int SparseMultinomialPerceptronProto::kInnerSizeFieldNumber;
const int SparseMultinomialPerceptronProto::kBiasFieldNumber;
const int SparseMultinomialPerceptronProto::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SparseMultinomialPerceptronProto::SparseMultinomialPerceptronProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseMultinomialPerceptronProto)
}

void SparseMultinomialPerceptronProto::InitAsDefaultInstance() {
  bias_ = const_cast< ::perceptronix::SparseInnerTableProto*>(&::perceptronix::SparseInnerTableProto::default_instance());
}

SparseMultinomialPerceptronProto::SparseMultinomialPerceptronProto(const SparseMultinomialPerceptronProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseMultinomialPerceptronProto)
}

void SparseMultinomialPerceptronProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inner_size_ = 0u;
  bias_ = NULL;
  table_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  table_.SetEntryDescriptor(
      &::perceptronix::SparseMultinomialPerceptronProto_TableEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseMultinomialPerceptronProto::~SparseMultinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseMultinomialPerceptronProto)
  SharedDtor();
}

void SparseMultinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete bias_;
  }
}

void SparseMultinomialPerceptronProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseMultinomialPerceptronProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseMultinomialPerceptronProto_descriptor_;
}

const SparseMultinomialPerceptronProto& SparseMultinomialPerceptronProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_linear_5fmodel_2eproto();
  return *default_instance_;
}

SparseMultinomialPerceptronProto* SparseMultinomialPerceptronProto::default_instance_ = NULL;

SparseMultinomialPerceptronProto* SparseMultinomialPerceptronProto::New(::google::protobuf::Arena* arena) const {
  SparseMultinomialPerceptronProto* n = new SparseMultinomialPerceptronProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SparseMultinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseMultinomialPerceptronProto)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_metadata()) {
      metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    inner_size_ = 0u;
    if (has_bias()) {
      if (bias_ != NULL) bias_->::perceptronix::SparseInnerTableProto::Clear();
    }
  }
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SparseMultinomialPerceptronProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseMultinomialPerceptronProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.SparseMultinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inner_size;
        break;
      }

      // required uint32 inner_size = 2;
      case 2: {
        if (tag == 16) {
         parse_inner_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_size_)));
          set_has_inner_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bias;
        break;
      }

      // required .perceptronix.SparseInnerTableProto bias = 3;
      case 3: {
        if (tag == 26) {
         parse_bias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_table;
        break;
      }

      // map<string, .perceptronix.SparseInnerTableProto> table = 4;
      case 4: {
        if (tag == 34) {
         parse_table:
          DO_(input->IncrementRecursionDepth());
         parse_loop_table:
          SparseMultinomialPerceptronProto_TableEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::perceptronix::SparseInnerTableProto,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto > > parser(&table_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perceptronix.SparseMultinomialPerceptronProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_table;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseMultinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseMultinomialPerceptronProto)
  return false;
#undef DO_
}

void SparseMultinomialPerceptronProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseMultinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseMultinomialPerceptronProto.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required uint32 inner_size = 2;
  if (has_inner_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inner_size(), output);
  }

  // required .perceptronix.SparseInnerTableProto bias = 3;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bias_, output);
  }

  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseMultinomialPerceptronProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseMultinomialPerceptronProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseMultinomialPerceptronProto)
}

::google::protobuf::uint8* SparseMultinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseMultinomialPerceptronProto)
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseMultinomialPerceptronProto.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required uint32 inner_size = 2;
  if (has_inner_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_size(), target);
  }

  // required .perceptronix.SparseInnerTableProto bias = 3;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bias_, false, target);
  }

  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (deterministic &&
        this->table().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->table().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SparseMultinomialPerceptronProto_TableEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(table_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SparseMultinomialPerceptronProto_TableEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        entry.reset(table_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseMultinomialPerceptronProto)
  return target;
}

int SparseMultinomialPerceptronProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:perceptronix.SparseMultinomialPerceptronProto)
  int total_size = 0;

  if (has_inner_size()) {
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_size());
  }

  if (has_bias()) {
    // required .perceptronix.SparseInnerTableProto bias = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_);
  }

  return total_size;
}
int SparseMultinomialPerceptronProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseMultinomialPerceptronProto)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inner_size());

    // required .perceptronix.SparseInnerTableProto bias = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bias_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string metadata = 1 [default = ""];
  if (has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  total_size += 1 * this->table_size();
  {
    ::google::protobuf::scoped_ptr<SparseMultinomialPerceptronProto_TableEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
        it = this->table().begin();
        it != this->table().end(); ++it) {
      entry.reset(table_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseMultinomialPerceptronProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseMultinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SparseMultinomialPerceptronProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SparseMultinomialPerceptronProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseMultinomialPerceptronProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseMultinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void SparseMultinomialPerceptronProto::MergeFrom(const SparseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseMultinomialPerceptronProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (from.has_inner_size()) {
      set_inner_size(from.inner_size());
    }
    if (from.has_bias()) {
      mutable_bias()->::perceptronix::SparseInnerTableProto::MergeFrom(from.bias());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SparseMultinomialPerceptronProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseMultinomialPerceptronProto::CopyFrom(const SparseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseMultinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void SparseMultinomialPerceptronProto::Swap(SparseMultinomialPerceptronProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SparseMultinomialPerceptronProto::InternalSwap(SparseMultinomialPerceptronProto* other) {
  metadata_.Swap(&other->metadata_);
  std::swap(inner_size_, other->inner_size_);
  std::swap(bias_, other->bias_);
  table_.Swap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SparseMultinomialPerceptronProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseMultinomialPerceptronProto_descriptor_;
  metadata.reflection = SparseMultinomialPerceptronProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SparseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
bool SparseMultinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SparseMultinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void SparseMultinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void SparseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
 const ::std::string& SparseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SparseMultinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
 void SparseMultinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
 void SparseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
 ::std::string* SparseMultinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseMultinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SparseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseMultinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SparseMultinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
bool SparseMultinomialPerceptronProto::has_inner_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SparseMultinomialPerceptronProto::set_has_inner_size() {
  _has_bits_[0] |= 0x00000002u;
}
void SparseMultinomialPerceptronProto::clear_has_inner_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void SparseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  clear_has_inner_size();
}
 ::google::protobuf::uint32 SparseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.inner_size)
  return inner_size_;
}
 void SparseMultinomialPerceptronProto::set_inner_size(::google::protobuf::uint32 value) {
  set_has_inner_size();
  inner_size_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.SparseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.SparseInnerTableProto bias = 3;
bool SparseMultinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SparseMultinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
void SparseMultinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
void SparseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != NULL) bias_->::perceptronix::SparseInnerTableProto::Clear();
  clear_has_bias();
}
const ::perceptronix::SparseInnerTableProto& SparseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.bias)
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
::perceptronix::SparseInnerTableProto* SparseMultinomialPerceptronProto::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) {
    bias_ = new ::perceptronix::SparseInnerTableProto;
  }
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseMultinomialPerceptronProto.bias)
  return bias_;
}
::perceptronix::SparseInnerTableProto* SparseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseMultinomialPerceptronProto.bias)
  clear_has_bias();
  ::perceptronix::SparseInnerTableProto* temp = bias_;
  bias_ = NULL;
  return temp;
}
void SparseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::SparseInnerTableProto* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    set_has_bias();
  } else {
    clear_has_bias();
  }
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseMultinomialPerceptronProto.bias)
}

// map<string, .perceptronix.SparseInnerTableProto> table = 4;
int SparseMultinomialPerceptronProto::table_size() const {
  return table_.size();
}
void SparseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >&
SparseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseMultinomialPerceptronProto.table)
  return table_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >*
SparseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseMultinomialPerceptronProto.table)
  return table_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perceptronix

// @@protoc_insertion_point(global_scope)
