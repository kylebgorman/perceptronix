// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linear_model.proto

#ifndef PROTOBUF_linear_5fmodel_2eproto__INCLUDED
#define PROTOBUF_linear_5fmodel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace perceptronix {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_linear_5fmodel_2eproto();
void protobuf_AssignDesc_linear_5fmodel_2eproto();
void protobuf_ShutdownFile_linear_5fmodel_2eproto();

class DenseBinomialPerceptronProto;
class DenseInnerTableProto;
class DenseMultinomialPerceptronProto;
class SparseBinomialPerceptronProto;
class SparseDenseMultinomialPerceptronProto;
class SparseInnerTableProto;
class SparseMultinomialPerceptronProto;

// ===================================================================

class DenseBinomialPerceptronProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perceptronix.DenseBinomialPerceptronProto) */ {
 public:
  DenseBinomialPerceptronProto();
  virtual ~DenseBinomialPerceptronProto();

  DenseBinomialPerceptronProto(const DenseBinomialPerceptronProto& from);

  inline DenseBinomialPerceptronProto& operator=(const DenseBinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseBinomialPerceptronProto& default_instance();

  void Swap(DenseBinomialPerceptronProto* other);

  // implements Message ----------------------------------------------

  inline DenseBinomialPerceptronProto* New() const { return New(NULL); }

  DenseBinomialPerceptronProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseBinomialPerceptronProto& from);
  void MergeFrom(const DenseBinomialPerceptronProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseBinomialPerceptronProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // required float bias = 2;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 2;
  float bias() const;
  void set_bias(float value);

  // repeated float table = 3;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 3;
  float table(int index) const;
  void set_table(int index, float value);
  void add_table(float value);
  const ::google::protobuf::RepeatedField< float >&
      table() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.DenseBinomialPerceptronProto)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_bias();
  inline void clear_has_bias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::RepeatedField< float > table_;
  float bias_;
  friend void  protobuf_AddDesc_linear_5fmodel_2eproto();
  friend void protobuf_AssignDesc_linear_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_linear_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static DenseBinomialPerceptronProto* default_instance_;
};
// -------------------------------------------------------------------

class SparseBinomialPerceptronProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseBinomialPerceptronProto) */ {
 public:
  SparseBinomialPerceptronProto();
  virtual ~SparseBinomialPerceptronProto();

  SparseBinomialPerceptronProto(const SparseBinomialPerceptronProto& from);

  inline SparseBinomialPerceptronProto& operator=(const SparseBinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseBinomialPerceptronProto& default_instance();

  void Swap(SparseBinomialPerceptronProto* other);

  // implements Message ----------------------------------------------

  inline SparseBinomialPerceptronProto* New() const { return New(NULL); }

  SparseBinomialPerceptronProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparseBinomialPerceptronProto& from);
  void MergeFrom(const SparseBinomialPerceptronProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseBinomialPerceptronProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // required float bias = 2;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 2;
  float bias() const;
  void set_bias(float value);

  // map<string, float> table = 3;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, float >&
      table() const;
  ::google::protobuf::Map< ::std::string, float >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.SparseBinomialPerceptronProto)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_bias();
  inline void clear_has_bias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 >
      SparseBinomialPerceptronProto_TableEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 > table_;
  float bias_;
  friend void  protobuf_AddDesc_linear_5fmodel_2eproto();
  friend void protobuf_AssignDesc_linear_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_linear_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static SparseBinomialPerceptronProto* default_instance_;
};
// -------------------------------------------------------------------

class DenseInnerTableProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perceptronix.DenseInnerTableProto) */ {
 public:
  DenseInnerTableProto();
  virtual ~DenseInnerTableProto();

  DenseInnerTableProto(const DenseInnerTableProto& from);

  inline DenseInnerTableProto& operator=(const DenseInnerTableProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseInnerTableProto& default_instance();

  void Swap(DenseInnerTableProto* other);

  // implements Message ----------------------------------------------

  inline DenseInnerTableProto* New() const { return New(NULL); }

  DenseInnerTableProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseInnerTableProto& from);
  void MergeFrom(const DenseInnerTableProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseInnerTableProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float table = 1;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  float table(int index) const;
  void set_table(int index, float value);
  void add_table(float value);
  const ::google::protobuf::RepeatedField< float >&
      table() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.DenseInnerTableProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > table_;
  friend void  protobuf_AddDesc_linear_5fmodel_2eproto();
  friend void protobuf_AssignDesc_linear_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_linear_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static DenseInnerTableProto* default_instance_;
};
// -------------------------------------------------------------------

class SparseInnerTableProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseInnerTableProto) */ {
 public:
  SparseInnerTableProto();
  virtual ~SparseInnerTableProto();

  SparseInnerTableProto(const SparseInnerTableProto& from);

  inline SparseInnerTableProto& operator=(const SparseInnerTableProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseInnerTableProto& default_instance();

  void Swap(SparseInnerTableProto* other);

  // implements Message ----------------------------------------------

  inline SparseInnerTableProto* New() const { return New(NULL); }

  SparseInnerTableProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparseInnerTableProto& from);
  void MergeFrom(const SparseInnerTableProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseInnerTableProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, float> table = 1;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, float >&
      table() const;
  ::google::protobuf::Map< ::std::string, float >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.SparseInnerTableProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 >
      SparseInnerTableProto_TableEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT,
      0 > table_;
  friend void  protobuf_AddDesc_linear_5fmodel_2eproto();
  friend void protobuf_AssignDesc_linear_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_linear_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static SparseInnerTableProto* default_instance_;
};
// -------------------------------------------------------------------

class DenseMultinomialPerceptronProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perceptronix.DenseMultinomialPerceptronProto) */ {
 public:
  DenseMultinomialPerceptronProto();
  virtual ~DenseMultinomialPerceptronProto();

  DenseMultinomialPerceptronProto(const DenseMultinomialPerceptronProto& from);

  inline DenseMultinomialPerceptronProto& operator=(const DenseMultinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseMultinomialPerceptronProto& default_instance();

  void Swap(DenseMultinomialPerceptronProto* other);

  // implements Message ----------------------------------------------

  inline DenseMultinomialPerceptronProto* New() const { return New(NULL); }

  DenseMultinomialPerceptronProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseMultinomialPerceptronProto& from);
  void MergeFrom(const DenseMultinomialPerceptronProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseMultinomialPerceptronProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // required uint32 inner_size = 2;
  bool has_inner_size() const;
  void clear_inner_size();
  static const int kInnerSizeFieldNumber = 2;
  ::google::protobuf::uint32 inner_size() const;
  void set_inner_size(::google::protobuf::uint32 value);

  // required .perceptronix.DenseInnerTableProto bias = 3;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 3;
  const ::perceptronix::DenseInnerTableProto& bias() const;
  ::perceptronix::DenseInnerTableProto* mutable_bias();
  ::perceptronix::DenseInnerTableProto* release_bias();
  void set_allocated_bias(::perceptronix::DenseInnerTableProto* bias);

  // repeated .perceptronix.DenseInnerTableProto table = 4;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 4;
  const ::perceptronix::DenseInnerTableProto& table(int index) const;
  ::perceptronix::DenseInnerTableProto* mutable_table(int index);
  ::perceptronix::DenseInnerTableProto* add_table();
  ::google::protobuf::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >*
      mutable_table();
  const ::google::protobuf::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >&
      table() const;

  // @@protoc_insertion_point(class_scope:perceptronix.DenseMultinomialPerceptronProto)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_inner_size();
  inline void clear_has_inner_size();
  inline void set_has_bias();
  inline void clear_has_bias();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::perceptronix::DenseInnerTableProto* bias_;
  ::google::protobuf::RepeatedPtrField< ::perceptronix::DenseInnerTableProto > table_;
  ::google::protobuf::uint32 inner_size_;
  friend void  protobuf_AddDesc_linear_5fmodel_2eproto();
  friend void protobuf_AssignDesc_linear_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_linear_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static DenseMultinomialPerceptronProto* default_instance_;
};
// -------------------------------------------------------------------

class SparseDenseMultinomialPerceptronProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseDenseMultinomialPerceptronProto) */ {
 public:
  SparseDenseMultinomialPerceptronProto();
  virtual ~SparseDenseMultinomialPerceptronProto();

  SparseDenseMultinomialPerceptronProto(const SparseDenseMultinomialPerceptronProto& from);

  inline SparseDenseMultinomialPerceptronProto& operator=(const SparseDenseMultinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseDenseMultinomialPerceptronProto& default_instance();

  void Swap(SparseDenseMultinomialPerceptronProto* other);

  // implements Message ----------------------------------------------

  inline SparseDenseMultinomialPerceptronProto* New() const { return New(NULL); }

  SparseDenseMultinomialPerceptronProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparseDenseMultinomialPerceptronProto& from);
  void MergeFrom(const SparseDenseMultinomialPerceptronProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseDenseMultinomialPerceptronProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // required uint32 inner_size = 2;
  bool has_inner_size() const;
  void clear_inner_size();
  static const int kInnerSizeFieldNumber = 2;
  ::google::protobuf::uint32 inner_size() const;
  void set_inner_size(::google::protobuf::uint32 value);

  // required .perceptronix.DenseInnerTableProto bias = 3;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 3;
  const ::perceptronix::DenseInnerTableProto& bias() const;
  ::perceptronix::DenseInnerTableProto* mutable_bias();
  ::perceptronix::DenseInnerTableProto* release_bias();
  void set_allocated_bias(::perceptronix::DenseInnerTableProto* bias);

  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >&
      table() const;
  ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.SparseDenseMultinomialPerceptronProto)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_inner_size();
  inline void clear_has_inner_size();
  inline void set_has_bias();
  inline void clear_has_bias();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::perceptronix::DenseInnerTableProto* bias_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::perceptronix::DenseInnerTableProto,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SparseDenseMultinomialPerceptronProto_TableEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::perceptronix::DenseInnerTableProto,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > table_;
  ::google::protobuf::uint32 inner_size_;
  friend void  protobuf_AddDesc_linear_5fmodel_2eproto();
  friend void protobuf_AssignDesc_linear_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_linear_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static SparseDenseMultinomialPerceptronProto* default_instance_;
};
// -------------------------------------------------------------------

class SparseMultinomialPerceptronProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseMultinomialPerceptronProto) */ {
 public:
  SparseMultinomialPerceptronProto();
  virtual ~SparseMultinomialPerceptronProto();

  SparseMultinomialPerceptronProto(const SparseMultinomialPerceptronProto& from);

  inline SparseMultinomialPerceptronProto& operator=(const SparseMultinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseMultinomialPerceptronProto& default_instance();

  void Swap(SparseMultinomialPerceptronProto* other);

  // implements Message ----------------------------------------------

  inline SparseMultinomialPerceptronProto* New() const { return New(NULL); }

  SparseMultinomialPerceptronProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparseMultinomialPerceptronProto& from);
  void MergeFrom(const SparseMultinomialPerceptronProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseMultinomialPerceptronProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // required uint32 inner_size = 2;
  bool has_inner_size() const;
  void clear_inner_size();
  static const int kInnerSizeFieldNumber = 2;
  ::google::protobuf::uint32 inner_size() const;
  void set_inner_size(::google::protobuf::uint32 value);

  // required .perceptronix.SparseInnerTableProto bias = 3;
  bool has_bias() const;
  void clear_bias();
  static const int kBiasFieldNumber = 3;
  const ::perceptronix::SparseInnerTableProto& bias() const;
  ::perceptronix::SparseInnerTableProto* mutable_bias();
  ::perceptronix::SparseInnerTableProto* release_bias();
  void set_allocated_bias(::perceptronix::SparseInnerTableProto* bias);

  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  int table_size() const;
  void clear_table();
  static const int kTableFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >&
      table() const;
  ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.SparseMultinomialPerceptronProto)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  inline void set_has_inner_size();
  inline void clear_has_inner_size();
  inline void set_has_bias();
  inline void clear_has_bias();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::perceptronix::SparseInnerTableProto* bias_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::perceptronix::SparseInnerTableProto,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SparseMultinomialPerceptronProto_TableEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::perceptronix::SparseInnerTableProto,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > table_;
  ::google::protobuf::uint32 inner_size_;
  friend void  protobuf_AddDesc_linear_5fmodel_2eproto();
  friend void protobuf_AssignDesc_linear_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_linear_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static SparseMultinomialPerceptronProto* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DenseBinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool DenseBinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DenseBinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DenseBinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DenseBinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
inline const ::std::string& DenseBinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseBinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.metadata)
}
inline void DenseBinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.DenseBinomialPerceptronProto.metadata)
}
inline void DenseBinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.DenseBinomialPerceptronProto.metadata)
}
inline ::std::string* DenseBinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseBinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DenseBinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseBinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseBinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseBinomialPerceptronProto.metadata)
}

// required float bias = 2;
inline bool DenseBinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DenseBinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DenseBinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DenseBinomialPerceptronProto::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float DenseBinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.bias)
  return bias_;
}
inline void DenseBinomialPerceptronProto::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.bias)
}

// repeated float table = 3;
inline int DenseBinomialPerceptronProto::table_size() const {
  return table_.size();
}
inline void DenseBinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline float DenseBinomialPerceptronProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.table)
  return table_.Get(index);
}
inline void DenseBinomialPerceptronProto::set_table(int index, float value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.table)
}
inline void DenseBinomialPerceptronProto::add_table(float value) {
  table_.Add(value);
  // @@protoc_insertion_point(field_add:perceptronix.DenseBinomialPerceptronProto.table)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseBinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseBinomialPerceptronProto.table)
  return table_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseBinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseBinomialPerceptronProto.table)
  return &table_;
}

// -------------------------------------------------------------------

// SparseBinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool SparseBinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparseBinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparseBinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparseBinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
inline const ::std::string& SparseBinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseBinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparseBinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseBinomialPerceptronProto.metadata)
}
inline void SparseBinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseBinomialPerceptronProto.metadata)
}
inline void SparseBinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseBinomialPerceptronProto.metadata)
}
inline ::std::string* SparseBinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseBinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparseBinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseBinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparseBinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseBinomialPerceptronProto.metadata)
}

// required float bias = 2;
inline bool SparseBinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparseBinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparseBinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparseBinomialPerceptronProto::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
inline float SparseBinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseBinomialPerceptronProto.bias)
  return bias_;
}
inline void SparseBinomialPerceptronProto::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.SparseBinomialPerceptronProto.bias)
}

// map<string, float> table = 3;
inline int SparseBinomialPerceptronProto::table_size() const {
  return table_.size();
}
inline void SparseBinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, float >&
SparseBinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseBinomialPerceptronProto.table)
  return table_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, float >*
SparseBinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseBinomialPerceptronProto.table)
  return table_.MutableMap();
}

// -------------------------------------------------------------------

// DenseInnerTableProto

// repeated float table = 1;
inline int DenseInnerTableProto::table_size() const {
  return table_.size();
}
inline void DenseInnerTableProto::clear_table() {
  table_.Clear();
}
inline float DenseInnerTableProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseInnerTableProto.table)
  return table_.Get(index);
}
inline void DenseInnerTableProto::set_table(int index, float value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseInnerTableProto.table)
}
inline void DenseInnerTableProto::add_table(float value) {
  table_.Add(value);
  // @@protoc_insertion_point(field_add:perceptronix.DenseInnerTableProto.table)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseInnerTableProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseInnerTableProto.table)
  return table_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseInnerTableProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseInnerTableProto.table)
  return &table_;
}

// -------------------------------------------------------------------

// SparseInnerTableProto

// map<string, float> table = 1;
inline int SparseInnerTableProto::table_size() const {
  return table_.size();
}
inline void SparseInnerTableProto::clear_table() {
  table_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, float >&
SparseInnerTableProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseInnerTableProto.table)
  return table_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, float >*
SparseInnerTableProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseInnerTableProto.table)
  return table_.MutableMap();
}

// -------------------------------------------------------------------

// DenseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool DenseMultinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DenseMultinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DenseMultinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DenseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
inline const ::std::string& DenseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseMultinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
inline void DenseMultinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
inline void DenseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
inline ::std::string* DenseMultinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DenseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseMultinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseMultinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
inline bool DenseMultinomialPerceptronProto::has_inner_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DenseMultinomialPerceptronProto::set_has_inner_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DenseMultinomialPerceptronProto::clear_has_inner_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DenseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  clear_has_inner_size();
}
inline ::google::protobuf::uint32 DenseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.inner_size)
  return inner_size_;
}
inline void DenseMultinomialPerceptronProto::set_inner_size(::google::protobuf::uint32 value) {
  set_has_inner_size();
  inner_size_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.DenseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.DenseInnerTableProto bias = 3;
inline bool DenseMultinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DenseMultinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DenseMultinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DenseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != NULL) bias_->::perceptronix::DenseInnerTableProto::Clear();
  clear_has_bias();
}
inline const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.bias)
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) {
    bias_ = new ::perceptronix::DenseInnerTableProto;
  }
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.bias)
  return bias_;
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseMultinomialPerceptronProto.bias)
  clear_has_bias();
  ::perceptronix::DenseInnerTableProto* temp = bias_;
  bias_ = NULL;
  return temp;
}
inline void DenseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::DenseInnerTableProto* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    set_has_bias();
  } else {
    clear_has_bias();
  }
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseMultinomialPerceptronProto.bias)
}

// repeated .perceptronix.DenseInnerTableProto table = 4;
inline int DenseMultinomialPerceptronProto::table_size() const {
  return table_.size();
}
inline void DenseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_.Get(index);
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_.Mutable(index);
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::add_table() {
  // @@protoc_insertion_point(field_add:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >*
DenseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseMultinomialPerceptronProto.table)
  return &table_;
}
inline const ::google::protobuf::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >&
DenseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_;
}

// -------------------------------------------------------------------

// SparseDenseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool SparseDenseMultinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparseDenseMultinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparseDenseMultinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparseDenseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
inline const ::std::string& SparseDenseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparseDenseMultinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
inline void SparseDenseMultinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
inline void SparseDenseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
inline ::std::string* SparseDenseMultinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparseDenseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparseDenseMultinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
inline bool SparseDenseMultinomialPerceptronProto::has_inner_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparseDenseMultinomialPerceptronProto::set_has_inner_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparseDenseMultinomialPerceptronProto::clear_has_inner_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparseDenseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  clear_has_inner_size();
}
inline ::google::protobuf::uint32 SparseDenseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.inner_size)
  return inner_size_;
}
inline void SparseDenseMultinomialPerceptronProto::set_inner_size(::google::protobuf::uint32 value) {
  set_has_inner_size();
  inner_size_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.SparseDenseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.DenseInnerTableProto bias = 3;
inline bool SparseDenseMultinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SparseDenseMultinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SparseDenseMultinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SparseDenseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != NULL) bias_->::perceptronix::DenseInnerTableProto::Clear();
  clear_has_bias();
}
inline const ::perceptronix::DenseInnerTableProto& SparseDenseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
inline ::perceptronix::DenseInnerTableProto* SparseDenseMultinomialPerceptronProto::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) {
    bias_ = new ::perceptronix::DenseInnerTableProto;
  }
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  return bias_;
}
inline ::perceptronix::DenseInnerTableProto* SparseDenseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  clear_has_bias();
  ::perceptronix::DenseInnerTableProto* temp = bias_;
  bias_ = NULL;
  return temp;
}
inline void SparseDenseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::DenseInnerTableProto* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    set_has_bias();
  } else {
    clear_has_bias();
  }
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
}

// map<string, .perceptronix.DenseInnerTableProto> table = 4;
inline int SparseDenseMultinomialPerceptronProto::table_size() const {
  return table_.size();
}
inline void SparseDenseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >&
SparseDenseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseDenseMultinomialPerceptronProto.table)
  return table_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::perceptronix::DenseInnerTableProto >*
SparseDenseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseDenseMultinomialPerceptronProto.table)
  return table_.MutableMap();
}

// -------------------------------------------------------------------

// SparseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool SparseMultinomialPerceptronProto::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparseMultinomialPerceptronProto::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparseMultinomialPerceptronProto::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
inline const ::std::string& SparseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.metadata)
  return metadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparseMultinomialPerceptronProto::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
inline void SparseMultinomialPerceptronProto::set_metadata(const char* value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
inline void SparseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
inline ::std::string* SparseMultinomialPerceptronProto::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseMultinomialPerceptronProto.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseMultinomialPerceptronProto.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparseMultinomialPerceptronProto::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
inline bool SparseMultinomialPerceptronProto::has_inner_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparseMultinomialPerceptronProto::set_has_inner_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparseMultinomialPerceptronProto::clear_has_inner_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  clear_has_inner_size();
}
inline ::google::protobuf::uint32 SparseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.inner_size)
  return inner_size_;
}
inline void SparseMultinomialPerceptronProto::set_inner_size(::google::protobuf::uint32 value) {
  set_has_inner_size();
  inner_size_ = value;
  // @@protoc_insertion_point(field_set:perceptronix.SparseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.SparseInnerTableProto bias = 3;
inline bool SparseMultinomialPerceptronProto::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SparseMultinomialPerceptronProto::set_has_bias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SparseMultinomialPerceptronProto::clear_has_bias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SparseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != NULL) bias_->::perceptronix::SparseInnerTableProto::Clear();
  clear_has_bias();
}
inline const ::perceptronix::SparseInnerTableProto& SparseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.bias)
  return bias_ != NULL ? *bias_ : *default_instance_->bias_;
}
inline ::perceptronix::SparseInnerTableProto* SparseMultinomialPerceptronProto::mutable_bias() {
  set_has_bias();
  if (bias_ == NULL) {
    bias_ = new ::perceptronix::SparseInnerTableProto;
  }
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseMultinomialPerceptronProto.bias)
  return bias_;
}
inline ::perceptronix::SparseInnerTableProto* SparseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseMultinomialPerceptronProto.bias)
  clear_has_bias();
  ::perceptronix::SparseInnerTableProto* temp = bias_;
  bias_ = NULL;
  return temp;
}
inline void SparseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::SparseInnerTableProto* bias) {
  delete bias_;
  bias_ = bias;
  if (bias) {
    set_has_bias();
  } else {
    clear_has_bias();
  }
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseMultinomialPerceptronProto.bias)
}

// map<string, .perceptronix.SparseInnerTableProto> table = 4;
inline int SparseMultinomialPerceptronProto::table_size() const {
  return table_.size();
}
inline void SparseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >&
SparseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseMultinomialPerceptronProto.table)
  return table_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::perceptronix::SparseInnerTableProto >*
SparseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseMultinomialPerceptronProto.table)
  return table_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perceptronix

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_linear_5fmodel_2eproto__INCLUDED
