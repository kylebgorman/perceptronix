// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linear_model.proto

#include "linear_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_linear_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DenseInnerTableProto_linear_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_linear_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseBinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_linear_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_linear_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseInnerTableProto_linear_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_linear_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseInnerTableProto_TableEntry_DoNotUse_linear_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_linear_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto;
namespace perceptronix {
class DenseBinomialPerceptronProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DenseBinomialPerceptronProto> _instance;
} _DenseBinomialPerceptronProto_default_instance_;
class SparseBinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseBinomialPerceptronProto_TableEntry_DoNotUse> _instance;
} _SparseBinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
class SparseBinomialPerceptronProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseBinomialPerceptronProto> _instance;
} _SparseBinomialPerceptronProto_default_instance_;
class DenseInnerTableProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DenseInnerTableProto> _instance;
} _DenseInnerTableProto_default_instance_;
class SparseInnerTableProto_TableEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseInnerTableProto_TableEntry_DoNotUse> _instance;
} _SparseInnerTableProto_TableEntry_DoNotUse_default_instance_;
class SparseInnerTableProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseInnerTableProto> _instance;
} _SparseInnerTableProto_default_instance_;
class DenseMultinomialPerceptronProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DenseMultinomialPerceptronProto> _instance;
} _DenseMultinomialPerceptronProto_default_instance_;
class SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse> _instance;
} _SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
class SparseDenseMultinomialPerceptronProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseDenseMultinomialPerceptronProto> _instance;
} _SparseDenseMultinomialPerceptronProto_default_instance_;
class SparseMultinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseMultinomialPerceptronProto_TableEntry_DoNotUse> _instance;
} _SparseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
class SparseMultinomialPerceptronProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseMultinomialPerceptronProto> _instance;
} _SparseMultinomialPerceptronProto_default_instance_;
}  // namespace perceptronix
static void InitDefaultsscc_info_DenseBinomialPerceptronProto_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_DenseBinomialPerceptronProto_default_instance_;
    new (ptr) ::perceptronix::DenseBinomialPerceptronProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perceptronix::DenseBinomialPerceptronProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DenseBinomialPerceptronProto_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DenseBinomialPerceptronProto_linear_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_DenseInnerTableProto_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_DenseInnerTableProto_default_instance_;
    new (ptr) ::perceptronix::DenseInnerTableProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perceptronix::DenseInnerTableProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DenseInnerTableProto_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DenseInnerTableProto_linear_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_DenseMultinomialPerceptronProto_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_DenseMultinomialPerceptronProto_default_instance_;
    new (ptr) ::perceptronix::DenseMultinomialPerceptronProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perceptronix::DenseMultinomialPerceptronProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DenseMultinomialPerceptronProto_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DenseMultinomialPerceptronProto_linear_5fmodel_2eproto}, {
      &scc_info_DenseInnerTableProto_linear_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseBinomialPerceptronProto_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseBinomialPerceptronProto_default_instance_;
    new (ptr) ::perceptronix::SparseBinomialPerceptronProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perceptronix::SparseBinomialPerceptronProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseBinomialPerceptronProto_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SparseBinomialPerceptronProto_linear_5fmodel_2eproto}, {
      &scc_info_SparseBinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseBinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseBinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
    new (ptr) ::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse();
  }
  ::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseBinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SparseBinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_SparseDenseMultinomialPerceptronProto_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseDenseMultinomialPerceptronProto_default_instance_;
    new (ptr) ::perceptronix::SparseDenseMultinomialPerceptronProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perceptronix::SparseDenseMultinomialPerceptronProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SparseDenseMultinomialPerceptronProto_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SparseDenseMultinomialPerceptronProto_linear_5fmodel_2eproto}, {
      &scc_info_DenseInnerTableProto_linear_5fmodel_2eproto.base,
      &scc_info_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
    new (ptr) ::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse();
  }
  ::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto}, {
      &scc_info_DenseInnerTableProto_linear_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseInnerTableProto_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseInnerTableProto_default_instance_;
    new (ptr) ::perceptronix::SparseInnerTableProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perceptronix::SparseInnerTableProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseInnerTableProto_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SparseInnerTableProto_linear_5fmodel_2eproto}, {
      &scc_info_SparseInnerTableProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseInnerTableProto_TableEntry_DoNotUse_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseInnerTableProto_TableEntry_DoNotUse_default_instance_;
    new (ptr) ::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse();
  }
  ::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseInnerTableProto_TableEntry_DoNotUse_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SparseInnerTableProto_TableEntry_DoNotUse_linear_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_SparseMultinomialPerceptronProto_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseMultinomialPerceptronProto_default_instance_;
    new (ptr) ::perceptronix::SparseMultinomialPerceptronProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perceptronix::SparseMultinomialPerceptronProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SparseMultinomialPerceptronProto_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SparseMultinomialPerceptronProto_linear_5fmodel_2eproto}, {
      &scc_info_SparseInnerTableProto_linear_5fmodel_2eproto.base,
      &scc_info_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perceptronix::_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
    new (ptr) ::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse();
  }
  ::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto}, {
      &scc_info_SparseInnerTableProto_linear_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_linear_5fmodel_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_linear_5fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_linear_5fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_linear_5fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseBinomialPerceptronProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseBinomialPerceptronProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseBinomialPerceptronProto, metadata_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseBinomialPerceptronProto, bias_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseBinomialPerceptronProto, table_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto, metadata_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto, bias_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseBinomialPerceptronProto, table_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseInnerTableProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseInnerTableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseInnerTableProto, table_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseInnerTableProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseInnerTableProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseInnerTableProto, table_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseMultinomialPerceptronProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseMultinomialPerceptronProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseMultinomialPerceptronProto, metadata_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseMultinomialPerceptronProto, inner_size_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseMultinomialPerceptronProto, bias_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::DenseMultinomialPerceptronProto, table_),
  0,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto, metadata_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto, inner_size_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto, bias_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseDenseMultinomialPerceptronProto, table_),
  0,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto, metadata_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto, inner_size_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto, bias_),
  PROTOBUF_FIELD_OFFSET(::perceptronix::SparseMultinomialPerceptronProto, table_),
  0,
  2,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::perceptronix::DenseBinomialPerceptronProto)},
  { 11, 18, sizeof(::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse)},
  { 20, 28, sizeof(::perceptronix::SparseBinomialPerceptronProto)},
  { 31, 37, sizeof(::perceptronix::DenseInnerTableProto)},
  { 38, 45, sizeof(::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse)},
  { 47, 53, sizeof(::perceptronix::SparseInnerTableProto)},
  { 54, 63, sizeof(::perceptronix::DenseMultinomialPerceptronProto)},
  { 67, 74, sizeof(::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse)},
  { 76, 85, sizeof(::perceptronix::SparseDenseMultinomialPerceptronProto)},
  { 89, 96, sizeof(::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse)},
  { 98, 107, sizeof(::perceptronix::SparseMultinomialPerceptronProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_DenseBinomialPerceptronProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseBinomialPerceptronProto_TableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseBinomialPerceptronProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_DenseInnerTableProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseInnerTableProto_TableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseInnerTableProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_DenseMultinomialPerceptronProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseDenseMultinomialPerceptronProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perceptronix::_SparseMultinomialPerceptronProto_default_instance_),
};

const char descriptor_table_protodef_linear_5fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022linear_model.proto\022\014perceptronix\"O\n\034De"
  "nseBinomialPerceptronProto\022\022\n\010metadata\030\001"
  " \001(\t:\000\022\014\n\004bias\030\002 \002(\002\022\r\n\005table\030\003 \003(\002\"\266\001\n\035"
  "SparseBinomialPerceptronProto\022\022\n\010metadat"
  "a\030\001 \001(\t:\000\022\014\n\004bias\030\002 \002(\002\022E\n\005table\030\003 \003(\01326"
  ".perceptronix.SparseBinomialPerceptronPr"
  "oto.TableEntry\032,\n\nTableEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\002:\0028\001\"%\n\024DenseInnerTableP"
  "roto\022\r\n\005table\030\001 \003(\002\"\204\001\n\025SparseInnerTable"
  "Proto\022=\n\005table\030\001 \003(\0132..perceptronix.Spar"
  "seInnerTableProto.TableEntry\032,\n\nTableEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002:\0028\001\"\256\001\n\037D"
  "enseMultinomialPerceptronProto\022\022\n\010metada"
  "ta\030\001 \001(\t:\000\022\022\n\ninner_size\030\002 \002(\r\0220\n\004bias\030\003"
  " \002(\0132\".perceptronix.DenseInnerTableProto"
  "\0221\n\005table\030\004 \003(\0132\".perceptronix.DenseInne"
  "rTableProto\"\242\002\n%SparseDenseMultinomialPe"
  "rceptronProto\022\022\n\010metadata\030\001 \001(\t:\000\022\022\n\ninn"
  "er_size\030\002 \002(\r\0220\n\004bias\030\003 \002(\0132\".perceptron"
  "ix.DenseInnerTableProto\022M\n\005table\030\004 \003(\0132>"
  ".perceptronix.SparseDenseMultinomialPerc"
  "eptronProto.TableEntry\032P\n\nTableEntry\022\013\n\003"
  "key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".perceptronix."
  "DenseInnerTableProto:\0028\001\"\232\002\n SparseMulti"
  "nomialPerceptronProto\022\022\n\010metadata\030\001 \001(\t:"
  "\000\022\022\n\ninner_size\030\002 \002(\r\0221\n\004bias\030\003 \002(\0132#.pe"
  "rceptronix.SparseInnerTableProto\022H\n\005tabl"
  "e\030\004 \003(\01329.perceptronix.SparseMultinomial"
  "PerceptronProto.TableEntry\032Q\n\nTableEntry"
  "\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.perceptro"
  "nix.SparseInnerTableProto:\0028\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_linear_5fmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_linear_5fmodel_2eproto_sccs[11] = {
  &scc_info_DenseBinomialPerceptronProto_linear_5fmodel_2eproto.base,
  &scc_info_DenseInnerTableProto_linear_5fmodel_2eproto.base,
  &scc_info_DenseMultinomialPerceptronProto_linear_5fmodel_2eproto.base,
  &scc_info_SparseBinomialPerceptronProto_linear_5fmodel_2eproto.base,
  &scc_info_SparseBinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,
  &scc_info_SparseDenseMultinomialPerceptronProto_linear_5fmodel_2eproto.base,
  &scc_info_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,
  &scc_info_SparseInnerTableProto_linear_5fmodel_2eproto.base,
  &scc_info_SparseInnerTableProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,
  &scc_info_SparseMultinomialPerceptronProto_linear_5fmodel_2eproto.base,
  &scc_info_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_linear_5fmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_linear_5fmodel_2eproto_once;
static bool descriptor_table_linear_5fmodel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_linear_5fmodel_2eproto = {
  &descriptor_table_linear_5fmodel_2eproto_initialized, descriptor_table_protodef_linear_5fmodel_2eproto, "linear_model.proto", 1229,
  &descriptor_table_linear_5fmodel_2eproto_once, descriptor_table_linear_5fmodel_2eproto_sccs, descriptor_table_linear_5fmodel_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_linear_5fmodel_2eproto::offsets,
  file_level_metadata_linear_5fmodel_2eproto, 11, file_level_enum_descriptors_linear_5fmodel_2eproto, file_level_service_descriptors_linear_5fmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_linear_5fmodel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_linear_5fmodel_2eproto), true);
namespace perceptronix {

// ===================================================================

void DenseBinomialPerceptronProto::InitAsDefaultInstance() {
}
class DenseBinomialPerceptronProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseBinomialPerceptronProto>()._has_bits_);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DenseBinomialPerceptronProto::DenseBinomialPerceptronProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.DenseBinomialPerceptronProto)
}
DenseBinomialPerceptronProto::DenseBinomialPerceptronProto(const DenseBinomialPerceptronProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      table_(from.table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  bias_ = from.bias_;
  // @@protoc_insertion_point(copy_constructor:perceptronix.DenseBinomialPerceptronProto)
}

void DenseBinomialPerceptronProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DenseBinomialPerceptronProto_linear_5fmodel_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bias_ = 0;
}

DenseBinomialPerceptronProto::~DenseBinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.DenseBinomialPerceptronProto)
  SharedDtor();
}

void DenseBinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DenseBinomialPerceptronProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DenseBinomialPerceptronProto& DenseBinomialPerceptronProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DenseBinomialPerceptronProto_linear_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void DenseBinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.DenseBinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmptyNoArena();
  }
  bias_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DenseBinomialPerceptronProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string metadata = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_metadata(), ptr, ctx, "perceptronix.DenseBinomialPerceptronProto.metadata");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_bias(&has_bits);
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_table(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 29);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_table(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DenseBinomialPerceptronProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.DenseBinomialPerceptronProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.DenseBinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float bias = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_bias(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float table = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_table())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_table())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.DenseBinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.DenseBinomialPerceptronProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DenseBinomialPerceptronProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.DenseBinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseBinomialPerceptronProto.metadata");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required float bias = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->bias(), output);
  }

  // repeated float table = 3;
  for (int i = 0, n = this->table_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      3, this->table(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.DenseBinomialPerceptronProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* DenseBinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.DenseBinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseBinomialPerceptronProto.metadata");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required float bias = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->bias(), target);
  }

  // repeated float table = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(3, this->table_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.DenseBinomialPerceptronProto)
  return target;
}

size_t DenseBinomialPerceptronProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.DenseBinomialPerceptronProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float bias = 2;
  if (has_bias()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float table = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->table_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->table_size());
    total_size += data_size;
  }

  // optional string metadata = 1 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DenseBinomialPerceptronProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.DenseBinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseBinomialPerceptronProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DenseBinomialPerceptronProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.DenseBinomialPerceptronProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.DenseBinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void DenseBinomialPerceptronProto::MergeFrom(const DenseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.DenseBinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      bias_ = from.bias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DenseBinomialPerceptronProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.DenseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseBinomialPerceptronProto::CopyFrom(const DenseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.DenseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseBinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void DenseBinomialPerceptronProto::InternalSwap(DenseBinomialPerceptronProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  table_.InternalSwap(&other->table_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bias_, other->bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseBinomialPerceptronProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SparseBinomialPerceptronProto_TableEntry_DoNotUse::SparseBinomialPerceptronProto_TableEntry_DoNotUse() {}
SparseBinomialPerceptronProto_TableEntry_DoNotUse::SparseBinomialPerceptronProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SparseBinomialPerceptronProto_TableEntry_DoNotUse::MergeFrom(const SparseBinomialPerceptronProto_TableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SparseBinomialPerceptronProto_TableEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SparseBinomialPerceptronProto_TableEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SparseBinomialPerceptronProto::InitAsDefaultInstance() {
}
class SparseBinomialPerceptronProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseBinomialPerceptronProto>()._has_bits_);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SparseBinomialPerceptronProto::SparseBinomialPerceptronProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseBinomialPerceptronProto)
}
SparseBinomialPerceptronProto::SparseBinomialPerceptronProto(const SparseBinomialPerceptronProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.MergeFrom(from.table_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  bias_ = from.bias_;
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseBinomialPerceptronProto)
}

void SparseBinomialPerceptronProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparseBinomialPerceptronProto_linear_5fmodel_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bias_ = 0;
}

SparseBinomialPerceptronProto::~SparseBinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseBinomialPerceptronProto)
  SharedDtor();
}

void SparseBinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SparseBinomialPerceptronProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseBinomialPerceptronProto& SparseBinomialPerceptronProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseBinomialPerceptronProto_linear_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void SparseBinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseBinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    metadata_.ClearNonDefaultToEmptyNoArena();
  }
  bias_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseBinomialPerceptronProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string metadata = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_metadata(), ptr, ctx, "perceptronix.SparseBinomialPerceptronProto.metadata");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_bias(&has_bits);
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<string, float> table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&table_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseBinomialPerceptronProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseBinomialPerceptronProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.SparseBinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float bias = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_bias(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> table = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          SparseBinomialPerceptronProto_TableEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SparseBinomialPerceptronProto_TableEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&table_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.SparseBinomialPerceptronProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseBinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseBinomialPerceptronProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseBinomialPerceptronProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseBinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseBinomialPerceptronProto.metadata");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required float bias = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->bias(), output);
  }

  // map<string, float> table = 3;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseBinomialPerceptronProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SparseBinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        SparseBinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseBinomialPerceptronProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseBinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseBinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseBinomialPerceptronProto.metadata");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required float bias = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->bias(), target);
  }

  // map<string, float> table = 3;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseBinomialPerceptronProto.TableEntry.key");
      }
    };

    if (false &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SparseBinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        target = SparseBinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseBinomialPerceptronProto)
  return target;
}

size_t SparseBinomialPerceptronProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseBinomialPerceptronProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float bias = 2;
  if (has_bias()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> table = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->table_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->table().begin();
      it != this->table().end(); ++it) {
    total_size += SparseBinomialPerceptronProto_TableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional string metadata = 1 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseBinomialPerceptronProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseBinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseBinomialPerceptronProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseBinomialPerceptronProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseBinomialPerceptronProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseBinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void SparseBinomialPerceptronProto::MergeFrom(const SparseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseBinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      bias_ = from.bias_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SparseBinomialPerceptronProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseBinomialPerceptronProto::CopyFrom(const SparseBinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseBinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseBinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void SparseBinomialPerceptronProto::InternalSwap(SparseBinomialPerceptronProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  table_.Swap(&other->table_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bias_, other->bias_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseBinomialPerceptronProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DenseInnerTableProto::InitAsDefaultInstance() {
}
class DenseInnerTableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseInnerTableProto>()._has_bits_);
};

DenseInnerTableProto::DenseInnerTableProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.DenseInnerTableProto)
}
DenseInnerTableProto::DenseInnerTableProto(const DenseInnerTableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      table_(from.table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perceptronix.DenseInnerTableProto)
}

void DenseInnerTableProto::SharedCtor() {
}

DenseInnerTableProto::~DenseInnerTableProto() {
  // @@protoc_insertion_point(destructor:perceptronix.DenseInnerTableProto)
  SharedDtor();
}

void DenseInnerTableProto::SharedDtor() {
}

void DenseInnerTableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DenseInnerTableProto& DenseInnerTableProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DenseInnerTableProto_linear_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void DenseInnerTableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.DenseInnerTableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DenseInnerTableProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_table(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_table(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DenseInnerTableProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.DenseInnerTableProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float table = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_table())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_table())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.DenseInnerTableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.DenseInnerTableProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DenseInnerTableProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.DenseInnerTableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float table = 1;
  for (int i = 0, n = this->table_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->table(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.DenseInnerTableProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* DenseInnerTableProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.DenseInnerTableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float table = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(1, this->table_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.DenseInnerTableProto)
  return target;
}

size_t DenseInnerTableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.DenseInnerTableProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float table = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->table_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->table_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DenseInnerTableProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.DenseInnerTableProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseInnerTableProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DenseInnerTableProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.DenseInnerTableProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.DenseInnerTableProto)
    MergeFrom(*source);
  }
}

void DenseInnerTableProto::MergeFrom(const DenseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.DenseInnerTableProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
}

void DenseInnerTableProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.DenseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseInnerTableProto::CopyFrom(const DenseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.DenseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseInnerTableProto::IsInitialized() const {
  return true;
}

void DenseInnerTableProto::InternalSwap(DenseInnerTableProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  table_.InternalSwap(&other->table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseInnerTableProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SparseInnerTableProto_TableEntry_DoNotUse::SparseInnerTableProto_TableEntry_DoNotUse() {}
SparseInnerTableProto_TableEntry_DoNotUse::SparseInnerTableProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SparseInnerTableProto_TableEntry_DoNotUse::MergeFrom(const SparseInnerTableProto_TableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SparseInnerTableProto_TableEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SparseInnerTableProto_TableEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SparseInnerTableProto::InitAsDefaultInstance() {
}
class SparseInnerTableProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseInnerTableProto>()._has_bits_);
};

SparseInnerTableProto::SparseInnerTableProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseInnerTableProto)
}
SparseInnerTableProto::SparseInnerTableProto(const SparseInnerTableProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.MergeFrom(from.table_);
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseInnerTableProto)
}

void SparseInnerTableProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparseInnerTableProto_linear_5fmodel_2eproto.base);
}

SparseInnerTableProto::~SparseInnerTableProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseInnerTableProto)
  SharedDtor();
}

void SparseInnerTableProto::SharedDtor() {
}

void SparseInnerTableProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseInnerTableProto& SparseInnerTableProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseInnerTableProto_linear_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void SparseInnerTableProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseInnerTableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseInnerTableProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, float> table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&table_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseInnerTableProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseInnerTableProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, float> table = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          SparseInnerTableProto_TableEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SparseInnerTableProto_TableEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&table_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.SparseInnerTableProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseInnerTableProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseInnerTableProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseInnerTableProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseInnerTableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> table = 1;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseInnerTableProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SparseInnerTableProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        SparseInnerTableProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseInnerTableProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseInnerTableProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseInnerTableProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> table = 1;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseInnerTableProto.TableEntry.key");
      }
    };

    if (false &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SparseInnerTableProto_TableEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        target = SparseInnerTableProto_TableEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseInnerTableProto)
  return target;
}

size_t SparseInnerTableProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseInnerTableProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> table = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->table_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->table().begin();
      it != this->table().end(); ++it) {
    total_size += SparseInnerTableProto_TableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseInnerTableProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseInnerTableProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseInnerTableProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseInnerTableProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseInnerTableProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseInnerTableProto)
    MergeFrom(*source);
  }
}

void SparseInnerTableProto::MergeFrom(const SparseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseInnerTableProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
}

void SparseInnerTableProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseInnerTableProto::CopyFrom(const SparseInnerTableProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseInnerTableProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseInnerTableProto::IsInitialized() const {
  return true;
}

void SparseInnerTableProto::InternalSwap(SparseInnerTableProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  table_.Swap(&other->table_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseInnerTableProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DenseMultinomialPerceptronProto::InitAsDefaultInstance() {
  ::perceptronix::_DenseMultinomialPerceptronProto_default_instance_._instance.get_mutable()->bias_ = const_cast< ::perceptronix::DenseInnerTableProto*>(
      ::perceptronix::DenseInnerTableProto::internal_default_instance());
}
class DenseMultinomialPerceptronProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DenseMultinomialPerceptronProto>()._has_bits_);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inner_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perceptronix::DenseInnerTableProto& bias(const DenseMultinomialPerceptronProto* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perceptronix::DenseInnerTableProto&
DenseMultinomialPerceptronProto::_Internal::bias(const DenseMultinomialPerceptronProto* msg) {
  return *msg->bias_;
}
DenseMultinomialPerceptronProto::DenseMultinomialPerceptronProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.DenseMultinomialPerceptronProto)
}
DenseMultinomialPerceptronProto::DenseMultinomialPerceptronProto(const DenseMultinomialPerceptronProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      table_(from.table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_bias()) {
    bias_ = new ::perceptronix::DenseInnerTableProto(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  inner_size_ = from.inner_size_;
  // @@protoc_insertion_point(copy_constructor:perceptronix.DenseMultinomialPerceptronProto)
}

void DenseMultinomialPerceptronProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DenseMultinomialPerceptronProto_linear_5fmodel_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inner_size_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(inner_size_));
}

DenseMultinomialPerceptronProto::~DenseMultinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.DenseMultinomialPerceptronProto)
  SharedDtor();
}

void DenseMultinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bias_;
}

void DenseMultinomialPerceptronProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DenseMultinomialPerceptronProto& DenseMultinomialPerceptronProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DenseMultinomialPerceptronProto_linear_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void DenseMultinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.DenseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_ != nullptr);
      bias_->Clear();
    }
  }
  inner_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DenseMultinomialPerceptronProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string metadata = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_metadata(), ptr, ctx, "perceptronix.DenseMultinomialPerceptronProto.metadata");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 inner_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inner_size(&has_bits);
          inner_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .perceptronix.DenseInnerTableProto bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perceptronix.DenseInnerTableProto table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DenseMultinomialPerceptronProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.DenseMultinomialPerceptronProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.DenseMultinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 inner_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_inner_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .perceptronix.DenseInnerTableProto bias = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .perceptronix.DenseInnerTableProto table = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.DenseMultinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.DenseMultinomialPerceptronProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DenseMultinomialPerceptronProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.DenseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseMultinomialPerceptronProto.metadata");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required uint32 inner_size = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->inner_size(), output);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::bias(this), output);
  }

  // repeated .perceptronix.DenseInnerTableProto table = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->table_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->table(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.DenseMultinomialPerceptronProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* DenseMultinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.DenseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.DenseMultinomialPerceptronProto.metadata");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required uint32 inner_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_size(), target);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::bias(this), target);
  }

  // repeated .perceptronix.DenseInnerTableProto table = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->table_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->table(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.DenseMultinomialPerceptronProto)
  return target;
}

size_t DenseMultinomialPerceptronProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:perceptronix.DenseMultinomialPerceptronProto)
  size_t total_size = 0;

  if (has_bias()) {
    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  if (has_inner_size()) {
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->inner_size());
  }

  return total_size;
}
size_t DenseMultinomialPerceptronProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.DenseMultinomialPerceptronProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);

    // required uint32 inner_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->inner_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perceptronix.DenseInnerTableProto table = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->table_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->table(static_cast<int>(i)));
    }
  }

  // optional string metadata = 1 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DenseMultinomialPerceptronProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.DenseMultinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  const DenseMultinomialPerceptronProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DenseMultinomialPerceptronProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.DenseMultinomialPerceptronProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.DenseMultinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void DenseMultinomialPerceptronProto::MergeFrom(const DenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.DenseMultinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias()->::perceptronix::DenseInnerTableProto::MergeFrom(from.bias());
    }
    if (cached_has_bits & 0x00000004u) {
      inner_size_ = from.inner_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DenseMultinomialPerceptronProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.DenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseMultinomialPerceptronProto::CopyFrom(const DenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.DenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseMultinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void DenseMultinomialPerceptronProto::InternalSwap(DenseMultinomialPerceptronProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&table_)->InternalSwap(CastToBase(&other->table_));
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bias_, other->bias_);
  swap(inner_size_, other->inner_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenseMultinomialPerceptronProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse() {}
SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::MergeFrom(const SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SparseDenseMultinomialPerceptronProto::InitAsDefaultInstance() {
  ::perceptronix::_SparseDenseMultinomialPerceptronProto_default_instance_._instance.get_mutable()->bias_ = const_cast< ::perceptronix::DenseInnerTableProto*>(
      ::perceptronix::DenseInnerTableProto::internal_default_instance());
}
class SparseDenseMultinomialPerceptronProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseDenseMultinomialPerceptronProto>()._has_bits_);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inner_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perceptronix::DenseInnerTableProto& bias(const SparseDenseMultinomialPerceptronProto* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perceptronix::DenseInnerTableProto&
SparseDenseMultinomialPerceptronProto::_Internal::bias(const SparseDenseMultinomialPerceptronProto* msg) {
  return *msg->bias_;
}
SparseDenseMultinomialPerceptronProto::SparseDenseMultinomialPerceptronProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseDenseMultinomialPerceptronProto)
}
SparseDenseMultinomialPerceptronProto::SparseDenseMultinomialPerceptronProto(const SparseDenseMultinomialPerceptronProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.MergeFrom(from.table_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_bias()) {
    bias_ = new ::perceptronix::DenseInnerTableProto(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  inner_size_ = from.inner_size_;
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseDenseMultinomialPerceptronProto)
}

void SparseDenseMultinomialPerceptronProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparseDenseMultinomialPerceptronProto_linear_5fmodel_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inner_size_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(inner_size_));
}

SparseDenseMultinomialPerceptronProto::~SparseDenseMultinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseDenseMultinomialPerceptronProto)
  SharedDtor();
}

void SparseDenseMultinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bias_;
}

void SparseDenseMultinomialPerceptronProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseDenseMultinomialPerceptronProto& SparseDenseMultinomialPerceptronProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseDenseMultinomialPerceptronProto_linear_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void SparseDenseMultinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_ != nullptr);
      bias_->Clear();
    }
  }
  inner_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseDenseMultinomialPerceptronProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string metadata = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_metadata(), ptr, ctx, "perceptronix.SparseDenseMultinomialPerceptronProto.metadata");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 inner_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inner_size(&has_bits);
          inner_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .perceptronix.DenseInnerTableProto bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .perceptronix.DenseInnerTableProto> table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&table_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseDenseMultinomialPerceptronProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.SparseDenseMultinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 inner_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_inner_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .perceptronix.DenseInnerTableProto bias = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .perceptronix.DenseInnerTableProto> table = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse,
              std::string, ::perceptronix::DenseInnerTableProto,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto > > parser(&table_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.SparseDenseMultinomialPerceptronProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseDenseMultinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseDenseMultinomialPerceptronProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseDenseMultinomialPerceptronProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseDenseMultinomialPerceptronProto.metadata");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required uint32 inner_size = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->inner_size(), output);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::bias(this), output);
  }

  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseDenseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseDenseMultinomialPerceptronProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseDenseMultinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseDenseMultinomialPerceptronProto.metadata");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required uint32 inner_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_size(), target);
  }

  // required .perceptronix.DenseInnerTableProto bias = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::bias(this), target);
  }

  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseDenseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (false &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        target = SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseDenseMultinomialPerceptronProto)
  return target;
}

size_t SparseDenseMultinomialPerceptronProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  size_t total_size = 0;

  if (has_bias()) {
    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  if (has_inner_size()) {
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->inner_size());
  }

  return total_size;
}
size_t SparseDenseMultinomialPerceptronProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .perceptronix.DenseInnerTableProto bias = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);

    // required uint32 inner_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->inner_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->table_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >::const_iterator
      it = this->table().begin();
      it != this->table().end(); ++it) {
    total_size += SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional string metadata = 1 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseDenseMultinomialPerceptronProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseDenseMultinomialPerceptronProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseDenseMultinomialPerceptronProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseDenseMultinomialPerceptronProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseDenseMultinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void SparseDenseMultinomialPerceptronProto::MergeFrom(const SparseDenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias()->::perceptronix::DenseInnerTableProto::MergeFrom(from.bias());
    }
    if (cached_has_bits & 0x00000004u) {
      inner_size_ = from.inner_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SparseDenseMultinomialPerceptronProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseDenseMultinomialPerceptronProto::CopyFrom(const SparseDenseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseDenseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseDenseMultinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void SparseDenseMultinomialPerceptronProto::InternalSwap(SparseDenseMultinomialPerceptronProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  table_.Swap(&other->table_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bias_, other->bias_);
  swap(inner_size_, other->inner_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseDenseMultinomialPerceptronProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SparseMultinomialPerceptronProto_TableEntry_DoNotUse::SparseMultinomialPerceptronProto_TableEntry_DoNotUse() {}
SparseMultinomialPerceptronProto_TableEntry_DoNotUse::SparseMultinomialPerceptronProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SparseMultinomialPerceptronProto_TableEntry_DoNotUse::MergeFrom(const SparseMultinomialPerceptronProto_TableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SparseMultinomialPerceptronProto_TableEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SparseMultinomialPerceptronProto_TableEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SparseMultinomialPerceptronProto::InitAsDefaultInstance() {
  ::perceptronix::_SparseMultinomialPerceptronProto_default_instance_._instance.get_mutable()->bias_ = const_cast< ::perceptronix::SparseInnerTableProto*>(
      ::perceptronix::SparseInnerTableProto::internal_default_instance());
}
class SparseMultinomialPerceptronProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseMultinomialPerceptronProto>()._has_bits_);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inner_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::perceptronix::SparseInnerTableProto& bias(const SparseMultinomialPerceptronProto* msg);
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::perceptronix::SparseInnerTableProto&
SparseMultinomialPerceptronProto::_Internal::bias(const SparseMultinomialPerceptronProto* msg) {
  return *msg->bias_;
}
SparseMultinomialPerceptronProto::SparseMultinomialPerceptronProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perceptronix.SparseMultinomialPerceptronProto)
}
SparseMultinomialPerceptronProto::SparseMultinomialPerceptronProto(const SparseMultinomialPerceptronProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  table_.MergeFrom(from.table_);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_bias()) {
    bias_ = new ::perceptronix::SparseInnerTableProto(*from.bias_);
  } else {
    bias_ = nullptr;
  }
  inner_size_ = from.inner_size_;
  // @@protoc_insertion_point(copy_constructor:perceptronix.SparseMultinomialPerceptronProto)
}

void SparseMultinomialPerceptronProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparseMultinomialPerceptronProto_linear_5fmodel_2eproto.base);
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inner_size_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(inner_size_));
}

SparseMultinomialPerceptronProto::~SparseMultinomialPerceptronProto() {
  // @@protoc_insertion_point(destructor:perceptronix.SparseMultinomialPerceptronProto)
  SharedDtor();
}

void SparseMultinomialPerceptronProto::SharedDtor() {
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bias_;
}

void SparseMultinomialPerceptronProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseMultinomialPerceptronProto& SparseMultinomialPerceptronProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseMultinomialPerceptronProto_linear_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void SparseMultinomialPerceptronProto::Clear() {
// @@protoc_insertion_point(message_clear_start:perceptronix.SparseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      metadata_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bias_ != nullptr);
      bias_->Clear();
    }
  }
  inner_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseMultinomialPerceptronProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string metadata = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_metadata(), ptr, ctx, "perceptronix.SparseMultinomialPerceptronProto.metadata");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 inner_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inner_size(&has_bits);
          inner_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .perceptronix.SparseInnerTableProto bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .perceptronix.SparseInnerTableProto> table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&table_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseMultinomialPerceptronProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:perceptronix.SparseMultinomialPerceptronProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string metadata = 1 [default = ""];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), static_cast<int>(this->metadata().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.SparseMultinomialPerceptronProto.metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 inner_size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_inner_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inner_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .perceptronix.SparseInnerTableProto bias = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .perceptronix.SparseInnerTableProto> table = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          SparseMultinomialPerceptronProto_TableEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SparseMultinomialPerceptronProto_TableEntry_DoNotUse,
              std::string, ::perceptronix::SparseInnerTableProto,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto > > parser(&table_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "perceptronix.SparseMultinomialPerceptronProto.TableEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perceptronix.SparseMultinomialPerceptronProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perceptronix.SparseMultinomialPerceptronProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseMultinomialPerceptronProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perceptronix.SparseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseMultinomialPerceptronProto.metadata");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->metadata(), output);
  }

  // required uint32 inner_size = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->inner_size(), output);
  }

  // required .perceptronix.SparseInnerTableProto bias = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::bias(this), output);
  }

  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SparseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        SparseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perceptronix.SparseMultinomialPerceptronProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseMultinomialPerceptronProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perceptronix.SparseMultinomialPerceptronProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string metadata = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), static_cast<int>(this->metadata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "perceptronix.SparseMultinomialPerceptronProto.metadata");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->metadata(), target);
  }

  // required uint32 inner_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->inner_size(), target);
  }

  // required .perceptronix.SparseInnerTableProto bias = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::bias(this), target);
  }

  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  if (!this->table().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "perceptronix.SparseMultinomialPerceptronProto.TableEntry.key");
      }
    };

    if (false &&
        this->table().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->table().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SparseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
          it = this->table().begin();
          it != this->table().end(); ++it) {
        target = SparseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perceptronix.SparseMultinomialPerceptronProto)
  return target;
}

size_t SparseMultinomialPerceptronProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:perceptronix.SparseMultinomialPerceptronProto)
  size_t total_size = 0;

  if (has_bias()) {
    // required .perceptronix.SparseInnerTableProto bias = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);
  }

  if (has_inner_size()) {
    // required uint32 inner_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->inner_size());
  }

  return total_size;
}
size_t SparseMultinomialPerceptronProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perceptronix.SparseMultinomialPerceptronProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .perceptronix.SparseInnerTableProto bias = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bias_);

    // required uint32 inner_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->inner_size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->table_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >::const_iterator
      it = this->table().begin();
      it != this->table().end(); ++it) {
    total_size += SparseMultinomialPerceptronProto_TableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional string metadata = 1 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->metadata());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseMultinomialPerceptronProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perceptronix.SparseMultinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseMultinomialPerceptronProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseMultinomialPerceptronProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perceptronix.SparseMultinomialPerceptronProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perceptronix.SparseMultinomialPerceptronProto)
    MergeFrom(*source);
  }
}

void SparseMultinomialPerceptronProto::MergeFrom(const SparseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perceptronix.SparseMultinomialPerceptronProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      metadata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bias()->::perceptronix::SparseInnerTableProto::MergeFrom(from.bias());
    }
    if (cached_has_bits & 0x00000004u) {
      inner_size_ = from.inner_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SparseMultinomialPerceptronProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perceptronix.SparseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseMultinomialPerceptronProto::CopyFrom(const SparseMultinomialPerceptronProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perceptronix.SparseMultinomialPerceptronProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseMultinomialPerceptronProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void SparseMultinomialPerceptronProto::InternalSwap(SparseMultinomialPerceptronProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  table_.Swap(&other->table_);
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bias_, other->bias_);
  swap(inner_size_, other->inner_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseMultinomialPerceptronProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perceptronix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perceptronix::DenseBinomialPerceptronProto* Arena::CreateMaybeMessage< ::perceptronix::DenseBinomialPerceptronProto >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::DenseBinomialPerceptronProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage< ::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseBinomialPerceptronProto* Arena::CreateMaybeMessage< ::perceptronix::SparseBinomialPerceptronProto >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseBinomialPerceptronProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::DenseInnerTableProto* Arena::CreateMaybeMessage< ::perceptronix::DenseInnerTableProto >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::DenseInnerTableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage< ::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseInnerTableProto* Arena::CreateMaybeMessage< ::perceptronix::SparseInnerTableProto >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseInnerTableProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::DenseMultinomialPerceptronProto* Arena::CreateMaybeMessage< ::perceptronix::DenseMultinomialPerceptronProto >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::DenseMultinomialPerceptronProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage< ::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseDenseMultinomialPerceptronProto* Arena::CreateMaybeMessage< ::perceptronix::SparseDenseMultinomialPerceptronProto >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseDenseMultinomialPerceptronProto >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage< ::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::perceptronix::SparseMultinomialPerceptronProto* Arena::CreateMaybeMessage< ::perceptronix::SparseMultinomialPerceptronProto >(Arena* arena) {
  return Arena::CreateInternal< ::perceptronix::SparseMultinomialPerceptronProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
