// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: linear_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_linear_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_linear_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_linear_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_linear_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_linear_5fmodel_2eproto;
namespace perceptronix {
class DenseBinomialPerceptronProto;
class DenseBinomialPerceptronProtoDefaultTypeInternal;
extern DenseBinomialPerceptronProtoDefaultTypeInternal _DenseBinomialPerceptronProto_default_instance_;
class DenseInnerTableProto;
class DenseInnerTableProtoDefaultTypeInternal;
extern DenseInnerTableProtoDefaultTypeInternal _DenseInnerTableProto_default_instance_;
class DenseMultinomialPerceptronProto;
class DenseMultinomialPerceptronProtoDefaultTypeInternal;
extern DenseMultinomialPerceptronProtoDefaultTypeInternal _DenseMultinomialPerceptronProto_default_instance_;
class SparseBinomialPerceptronProto;
class SparseBinomialPerceptronProtoDefaultTypeInternal;
extern SparseBinomialPerceptronProtoDefaultTypeInternal _SparseBinomialPerceptronProto_default_instance_;
class SparseBinomialPerceptronProto_TableEntry_DoNotUse;
class SparseBinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal;
extern SparseBinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal _SparseBinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
class SparseDenseMultinomialPerceptronProto;
class SparseDenseMultinomialPerceptronProtoDefaultTypeInternal;
extern SparseDenseMultinomialPerceptronProtoDefaultTypeInternal _SparseDenseMultinomialPerceptronProto_default_instance_;
class SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse;
class SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal;
extern SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal _SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
class SparseInnerTableProto;
class SparseInnerTableProtoDefaultTypeInternal;
extern SparseInnerTableProtoDefaultTypeInternal _SparseInnerTableProto_default_instance_;
class SparseInnerTableProto_TableEntry_DoNotUse;
class SparseInnerTableProto_TableEntry_DoNotUseDefaultTypeInternal;
extern SparseInnerTableProto_TableEntry_DoNotUseDefaultTypeInternal _SparseInnerTableProto_TableEntry_DoNotUse_default_instance_;
class SparseMultinomialPerceptronProto;
class SparseMultinomialPerceptronProtoDefaultTypeInternal;
extern SparseMultinomialPerceptronProtoDefaultTypeInternal _SparseMultinomialPerceptronProto_default_instance_;
class SparseMultinomialPerceptronProto_TableEntry_DoNotUse;
class SparseMultinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal;
extern SparseMultinomialPerceptronProto_TableEntry_DoNotUseDefaultTypeInternal _SparseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_;
}  // namespace perceptronix
PROTOBUF_NAMESPACE_OPEN
template<> ::perceptronix::DenseBinomialPerceptronProto* Arena::CreateMaybeMessage<::perceptronix::DenseBinomialPerceptronProto>(Arena*);
template<> ::perceptronix::DenseInnerTableProto* Arena::CreateMaybeMessage<::perceptronix::DenseInnerTableProto>(Arena*);
template<> ::perceptronix::DenseMultinomialPerceptronProto* Arena::CreateMaybeMessage<::perceptronix::DenseMultinomialPerceptronProto>(Arena*);
template<> ::perceptronix::SparseBinomialPerceptronProto* Arena::CreateMaybeMessage<::perceptronix::SparseBinomialPerceptronProto>(Arena*);
template<> ::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage<::perceptronix::SparseBinomialPerceptronProto_TableEntry_DoNotUse>(Arena*);
template<> ::perceptronix::SparseDenseMultinomialPerceptronProto* Arena::CreateMaybeMessage<::perceptronix::SparseDenseMultinomialPerceptronProto>(Arena*);
template<> ::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage<::perceptronix::SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse>(Arena*);
template<> ::perceptronix::SparseInnerTableProto* Arena::CreateMaybeMessage<::perceptronix::SparseInnerTableProto>(Arena*);
template<> ::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage<::perceptronix::SparseInnerTableProto_TableEntry_DoNotUse>(Arena*);
template<> ::perceptronix::SparseMultinomialPerceptronProto* Arena::CreateMaybeMessage<::perceptronix::SparseMultinomialPerceptronProto>(Arena*);
template<> ::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse* Arena::CreateMaybeMessage<::perceptronix::SparseMultinomialPerceptronProto_TableEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perceptronix {

// ===================================================================

class DenseBinomialPerceptronProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perceptronix.DenseBinomialPerceptronProto) */ {
 public:
  DenseBinomialPerceptronProto();
  virtual ~DenseBinomialPerceptronProto();

  DenseBinomialPerceptronProto(const DenseBinomialPerceptronProto& from);
  DenseBinomialPerceptronProto(DenseBinomialPerceptronProto&& from) noexcept
    : DenseBinomialPerceptronProto() {
    *this = ::std::move(from);
  }

  inline DenseBinomialPerceptronProto& operator=(const DenseBinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseBinomialPerceptronProto& operator=(DenseBinomialPerceptronProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseBinomialPerceptronProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseBinomialPerceptronProto* internal_default_instance() {
    return reinterpret_cast<const DenseBinomialPerceptronProto*>(
               &_DenseBinomialPerceptronProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DenseBinomialPerceptronProto& a, DenseBinomialPerceptronProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseBinomialPerceptronProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseBinomialPerceptronProto* New() const final {
    return CreateMaybeMessage<DenseBinomialPerceptronProto>(nullptr);
  }

  DenseBinomialPerceptronProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseBinomialPerceptronProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseBinomialPerceptronProto& from);
  void MergeFrom(const DenseBinomialPerceptronProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseBinomialPerceptronProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perceptronix.DenseBinomialPerceptronProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 3,
    kMetadataFieldNumber = 1,
    kBiasFieldNumber = 2,
  };
  // repeated float table = 3;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  private:
  float _internal_table(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_table() const;
  void _internal_add_table(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_table();
  public:
  float table(int index) const;
  void set_table(int index, float value);
  void add_table(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_table();

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // required float bias = 2;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  float bias() const;
  void set_bias(float value);
  private:
  float _internal_bias() const;
  void _internal_set_bias(float value);
  public:

  // @@protoc_insertion_point(class_scope:perceptronix.DenseBinomialPerceptronProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  float bias_;
  friend struct ::TableStruct_linear_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class SparseBinomialPerceptronProto_TableEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseBinomialPerceptronProto_TableEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseBinomialPerceptronProto_TableEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  SparseBinomialPerceptronProto_TableEntry_DoNotUse();
  SparseBinomialPerceptronProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SparseBinomialPerceptronProto_TableEntry_DoNotUse& other);
  static const SparseBinomialPerceptronProto_TableEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparseBinomialPerceptronProto_TableEntry_DoNotUse*>(&_SparseBinomialPerceptronProto_TableEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perceptronix.SparseBinomialPerceptronProto.TableEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class SparseBinomialPerceptronProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseBinomialPerceptronProto) */ {
 public:
  SparseBinomialPerceptronProto();
  virtual ~SparseBinomialPerceptronProto();

  SparseBinomialPerceptronProto(const SparseBinomialPerceptronProto& from);
  SparseBinomialPerceptronProto(SparseBinomialPerceptronProto&& from) noexcept
    : SparseBinomialPerceptronProto() {
    *this = ::std::move(from);
  }

  inline SparseBinomialPerceptronProto& operator=(const SparseBinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseBinomialPerceptronProto& operator=(SparseBinomialPerceptronProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparseBinomialPerceptronProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseBinomialPerceptronProto* internal_default_instance() {
    return reinterpret_cast<const SparseBinomialPerceptronProto*>(
               &_SparseBinomialPerceptronProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SparseBinomialPerceptronProto& a, SparseBinomialPerceptronProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseBinomialPerceptronProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseBinomialPerceptronProto* New() const final {
    return CreateMaybeMessage<SparseBinomialPerceptronProto>(nullptr);
  }

  SparseBinomialPerceptronProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseBinomialPerceptronProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseBinomialPerceptronProto& from);
  void MergeFrom(const SparseBinomialPerceptronProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseBinomialPerceptronProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perceptronix.SparseBinomialPerceptronProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 3,
    kMetadataFieldNumber = 1,
    kBiasFieldNumber = 2,
  };
  // map<string, float> table = 3;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_table();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_table();

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // required float bias = 2;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  float bias() const;
  void set_bias(float value);
  private:
  float _internal_bias() const;
  void _internal_set_bias(float value);
  public:

  // @@protoc_insertion_point(class_scope:perceptronix.SparseBinomialPerceptronProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SparseBinomialPerceptronProto_TableEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  float bias_;
  friend struct ::TableStruct_linear_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class DenseInnerTableProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perceptronix.DenseInnerTableProto) */ {
 public:
  DenseInnerTableProto();
  virtual ~DenseInnerTableProto();

  DenseInnerTableProto(const DenseInnerTableProto& from);
  DenseInnerTableProto(DenseInnerTableProto&& from) noexcept
    : DenseInnerTableProto() {
    *this = ::std::move(from);
  }

  inline DenseInnerTableProto& operator=(const DenseInnerTableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseInnerTableProto& operator=(DenseInnerTableProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseInnerTableProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseInnerTableProto* internal_default_instance() {
    return reinterpret_cast<const DenseInnerTableProto*>(
               &_DenseInnerTableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DenseInnerTableProto& a, DenseInnerTableProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseInnerTableProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseInnerTableProto* New() const final {
    return CreateMaybeMessage<DenseInnerTableProto>(nullptr);
  }

  DenseInnerTableProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseInnerTableProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseInnerTableProto& from);
  void MergeFrom(const DenseInnerTableProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseInnerTableProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perceptronix.DenseInnerTableProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
  };
  // repeated float table = 1;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  private:
  float _internal_table(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_table() const;
  void _internal_add_table(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_table();
  public:
  float table(int index) const;
  void set_table(int index, float value);
  void add_table(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.DenseInnerTableProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > table_;
  friend struct ::TableStruct_linear_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class SparseInnerTableProto_TableEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseInnerTableProto_TableEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseInnerTableProto_TableEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  SparseInnerTableProto_TableEntry_DoNotUse();
  SparseInnerTableProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SparseInnerTableProto_TableEntry_DoNotUse& other);
  static const SparseInnerTableProto_TableEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparseInnerTableProto_TableEntry_DoNotUse*>(&_SparseInnerTableProto_TableEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perceptronix.SparseInnerTableProto.TableEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class SparseInnerTableProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseInnerTableProto) */ {
 public:
  SparseInnerTableProto();
  virtual ~SparseInnerTableProto();

  SparseInnerTableProto(const SparseInnerTableProto& from);
  SparseInnerTableProto(SparseInnerTableProto&& from) noexcept
    : SparseInnerTableProto() {
    *this = ::std::move(from);
  }

  inline SparseInnerTableProto& operator=(const SparseInnerTableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseInnerTableProto& operator=(SparseInnerTableProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparseInnerTableProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseInnerTableProto* internal_default_instance() {
    return reinterpret_cast<const SparseInnerTableProto*>(
               &_SparseInnerTableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SparseInnerTableProto& a, SparseInnerTableProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseInnerTableProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseInnerTableProto* New() const final {
    return CreateMaybeMessage<SparseInnerTableProto>(nullptr);
  }

  SparseInnerTableProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseInnerTableProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseInnerTableProto& from);
  void MergeFrom(const SparseInnerTableProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseInnerTableProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perceptronix.SparseInnerTableProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
  };
  // map<string, float> table = 1;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_table();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_table();

  // @@protoc_insertion_point(class_scope:perceptronix.SparseInnerTableProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SparseInnerTableProto_TableEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > table_;
  friend struct ::TableStruct_linear_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class DenseMultinomialPerceptronProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perceptronix.DenseMultinomialPerceptronProto) */ {
 public:
  DenseMultinomialPerceptronProto();
  virtual ~DenseMultinomialPerceptronProto();

  DenseMultinomialPerceptronProto(const DenseMultinomialPerceptronProto& from);
  DenseMultinomialPerceptronProto(DenseMultinomialPerceptronProto&& from) noexcept
    : DenseMultinomialPerceptronProto() {
    *this = ::std::move(from);
  }

  inline DenseMultinomialPerceptronProto& operator=(const DenseMultinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseMultinomialPerceptronProto& operator=(DenseMultinomialPerceptronProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DenseMultinomialPerceptronProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseMultinomialPerceptronProto* internal_default_instance() {
    return reinterpret_cast<const DenseMultinomialPerceptronProto*>(
               &_DenseMultinomialPerceptronProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DenseMultinomialPerceptronProto& a, DenseMultinomialPerceptronProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseMultinomialPerceptronProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DenseMultinomialPerceptronProto* New() const final {
    return CreateMaybeMessage<DenseMultinomialPerceptronProto>(nullptr);
  }

  DenseMultinomialPerceptronProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DenseMultinomialPerceptronProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DenseMultinomialPerceptronProto& from);
  void MergeFrom(const DenseMultinomialPerceptronProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenseMultinomialPerceptronProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perceptronix.DenseMultinomialPerceptronProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 4,
    kMetadataFieldNumber = 1,
    kBiasFieldNumber = 3,
    kInnerSizeFieldNumber = 2,
  };
  // repeated .perceptronix.DenseInnerTableProto table = 4;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  ::perceptronix::DenseInnerTableProto* mutable_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >*
      mutable_table();
  private:
  const ::perceptronix::DenseInnerTableProto& _internal_table(int index) const;
  ::perceptronix::DenseInnerTableProto* _internal_add_table();
  public:
  const ::perceptronix::DenseInnerTableProto& table(int index) const;
  ::perceptronix::DenseInnerTableProto* add_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >&
      table() const;

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // required .perceptronix.DenseInnerTableProto bias = 3;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::perceptronix::DenseInnerTableProto& bias() const;
  ::perceptronix::DenseInnerTableProto* release_bias();
  ::perceptronix::DenseInnerTableProto* mutable_bias();
  void set_allocated_bias(::perceptronix::DenseInnerTableProto* bias);
  private:
  const ::perceptronix::DenseInnerTableProto& _internal_bias() const;
  ::perceptronix::DenseInnerTableProto* _internal_mutable_bias();
  public:

  // required uint32 inner_size = 2;
  bool has_inner_size() const;
  private:
  bool _internal_has_inner_size() const;
  public:
  void clear_inner_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 inner_size() const;
  void set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inner_size() const;
  void _internal_set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perceptronix.DenseMultinomialPerceptronProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perceptronix::DenseInnerTableProto > table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::perceptronix::DenseInnerTableProto* bias_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inner_size_;
  friend struct ::TableStruct_linear_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse, 
    std::string, ::perceptronix::DenseInnerTableProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse, 
    std::string, ::perceptronix::DenseInnerTableProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse();
  SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse& other);
  static const SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse*>(&_SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perceptronix.SparseDenseMultinomialPerceptronProto.TableEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class SparseDenseMultinomialPerceptronProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseDenseMultinomialPerceptronProto) */ {
 public:
  SparseDenseMultinomialPerceptronProto();
  virtual ~SparseDenseMultinomialPerceptronProto();

  SparseDenseMultinomialPerceptronProto(const SparseDenseMultinomialPerceptronProto& from);
  SparseDenseMultinomialPerceptronProto(SparseDenseMultinomialPerceptronProto&& from) noexcept
    : SparseDenseMultinomialPerceptronProto() {
    *this = ::std::move(from);
  }

  inline SparseDenseMultinomialPerceptronProto& operator=(const SparseDenseMultinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseDenseMultinomialPerceptronProto& operator=(SparseDenseMultinomialPerceptronProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparseDenseMultinomialPerceptronProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseDenseMultinomialPerceptronProto* internal_default_instance() {
    return reinterpret_cast<const SparseDenseMultinomialPerceptronProto*>(
               &_SparseDenseMultinomialPerceptronProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SparseDenseMultinomialPerceptronProto& a, SparseDenseMultinomialPerceptronProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseDenseMultinomialPerceptronProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseDenseMultinomialPerceptronProto* New() const final {
    return CreateMaybeMessage<SparseDenseMultinomialPerceptronProto>(nullptr);
  }

  SparseDenseMultinomialPerceptronProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseDenseMultinomialPerceptronProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseDenseMultinomialPerceptronProto& from);
  void MergeFrom(const SparseDenseMultinomialPerceptronProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseDenseMultinomialPerceptronProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perceptronix.SparseDenseMultinomialPerceptronProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 4,
    kMetadataFieldNumber = 1,
    kBiasFieldNumber = 3,
    kInnerSizeFieldNumber = 2,
  };
  // map<string, .perceptronix.DenseInnerTableProto> table = 4;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >&
      _internal_table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >*
      _internal_mutable_table();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >&
      table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >*
      mutable_table();

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // required .perceptronix.DenseInnerTableProto bias = 3;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::perceptronix::DenseInnerTableProto& bias() const;
  ::perceptronix::DenseInnerTableProto* release_bias();
  ::perceptronix::DenseInnerTableProto* mutable_bias();
  void set_allocated_bias(::perceptronix::DenseInnerTableProto* bias);
  private:
  const ::perceptronix::DenseInnerTableProto& _internal_bias() const;
  ::perceptronix::DenseInnerTableProto* _internal_mutable_bias();
  public:

  // required uint32 inner_size = 2;
  bool has_inner_size() const;
  private:
  bool _internal_has_inner_size() const;
  public:
  void clear_inner_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 inner_size() const;
  void set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inner_size() const;
  void _internal_set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perceptronix.SparseDenseMultinomialPerceptronProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SparseDenseMultinomialPerceptronProto_TableEntry_DoNotUse,
      std::string, ::perceptronix::DenseInnerTableProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::perceptronix::DenseInnerTableProto* bias_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inner_size_;
  friend struct ::TableStruct_linear_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class SparseMultinomialPerceptronProto_TableEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseMultinomialPerceptronProto_TableEntry_DoNotUse, 
    std::string, ::perceptronix::SparseInnerTableProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SparseMultinomialPerceptronProto_TableEntry_DoNotUse, 
    std::string, ::perceptronix::SparseInnerTableProto,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SparseMultinomialPerceptronProto_TableEntry_DoNotUse();
  SparseMultinomialPerceptronProto_TableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SparseMultinomialPerceptronProto_TableEntry_DoNotUse& other);
  static const SparseMultinomialPerceptronProto_TableEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparseMultinomialPerceptronProto_TableEntry_DoNotUse*>(&_SparseMultinomialPerceptronProto_TableEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "perceptronix.SparseMultinomialPerceptronProto.TableEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class SparseMultinomialPerceptronProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perceptronix.SparseMultinomialPerceptronProto) */ {
 public:
  SparseMultinomialPerceptronProto();
  virtual ~SparseMultinomialPerceptronProto();

  SparseMultinomialPerceptronProto(const SparseMultinomialPerceptronProto& from);
  SparseMultinomialPerceptronProto(SparseMultinomialPerceptronProto&& from) noexcept
    : SparseMultinomialPerceptronProto() {
    *this = ::std::move(from);
  }

  inline SparseMultinomialPerceptronProto& operator=(const SparseMultinomialPerceptronProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseMultinomialPerceptronProto& operator=(SparseMultinomialPerceptronProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparseMultinomialPerceptronProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseMultinomialPerceptronProto* internal_default_instance() {
    return reinterpret_cast<const SparseMultinomialPerceptronProto*>(
               &_SparseMultinomialPerceptronProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SparseMultinomialPerceptronProto& a, SparseMultinomialPerceptronProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseMultinomialPerceptronProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseMultinomialPerceptronProto* New() const final {
    return CreateMaybeMessage<SparseMultinomialPerceptronProto>(nullptr);
  }

  SparseMultinomialPerceptronProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseMultinomialPerceptronProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseMultinomialPerceptronProto& from);
  void MergeFrom(const SparseMultinomialPerceptronProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseMultinomialPerceptronProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perceptronix.SparseMultinomialPerceptronProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_linear_5fmodel_2eproto);
    return ::descriptor_table_linear_5fmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 4,
    kMetadataFieldNumber = 1,
    kBiasFieldNumber = 3,
    kInnerSizeFieldNumber = 2,
  };
  // map<string, .perceptronix.SparseInnerTableProto> table = 4;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >&
      _internal_table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >*
      _internal_mutable_table();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >&
      table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >*
      mutable_table();

  // optional string metadata = 1 [default = ""];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // required .perceptronix.SparseInnerTableProto bias = 3;
  bool has_bias() const;
  private:
  bool _internal_has_bias() const;
  public:
  void clear_bias();
  const ::perceptronix::SparseInnerTableProto& bias() const;
  ::perceptronix::SparseInnerTableProto* release_bias();
  ::perceptronix::SparseInnerTableProto* mutable_bias();
  void set_allocated_bias(::perceptronix::SparseInnerTableProto* bias);
  private:
  const ::perceptronix::SparseInnerTableProto& _internal_bias() const;
  ::perceptronix::SparseInnerTableProto* _internal_mutable_bias();
  public:

  // required uint32 inner_size = 2;
  bool has_inner_size() const;
  private:
  bool _internal_has_inner_size() const;
  public:
  void clear_inner_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 inner_size() const;
  void set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inner_size() const;
  void _internal_set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:perceptronix.SparseMultinomialPerceptronProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SparseMultinomialPerceptronProto_TableEntry_DoNotUse,
      std::string, ::perceptronix::SparseInnerTableProto,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > table_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::perceptronix::SparseInnerTableProto* bias_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inner_size_;
  friend struct ::TableStruct_linear_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DenseBinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool DenseBinomialPerceptronProto::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DenseBinomialPerceptronProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void DenseBinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DenseBinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.metadata)
  return _internal_metadata();
}
inline void DenseBinomialPerceptronProto::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.metadata)
}
inline std::string* DenseBinomialPerceptronProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseBinomialPerceptronProto.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& DenseBinomialPerceptronProto::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void DenseBinomialPerceptronProto::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DenseBinomialPerceptronProto::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perceptronix.DenseBinomialPerceptronProto.metadata)
}
inline void DenseBinomialPerceptronProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.DenseBinomialPerceptronProto.metadata)
}
inline void DenseBinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.DenseBinomialPerceptronProto.metadata)
}
inline std::string* DenseBinomialPerceptronProto::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DenseBinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseBinomialPerceptronProto.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DenseBinomialPerceptronProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseBinomialPerceptronProto.metadata)
}

// required float bias = 2;
inline bool DenseBinomialPerceptronProto::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DenseBinomialPerceptronProto::has_bias() const {
  return _internal_has_bias();
}
inline void DenseBinomialPerceptronProto::clear_bias() {
  bias_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float DenseBinomialPerceptronProto::_internal_bias() const {
  return bias_;
}
inline float DenseBinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.bias)
  return _internal_bias();
}
inline void DenseBinomialPerceptronProto::_internal_set_bias(float value) {
  _has_bits_[0] |= 0x00000002u;
  bias_ = value;
}
inline void DenseBinomialPerceptronProto::set_bias(float value) {
  _internal_set_bias(value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.bias)
}

// repeated float table = 3;
inline int DenseBinomialPerceptronProto::_internal_table_size() const {
  return table_.size();
}
inline int DenseBinomialPerceptronProto::table_size() const {
  return _internal_table_size();
}
inline void DenseBinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline float DenseBinomialPerceptronProto::_internal_table(int index) const {
  return table_.Get(index);
}
inline float DenseBinomialPerceptronProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseBinomialPerceptronProto.table)
  return _internal_table(index);
}
inline void DenseBinomialPerceptronProto::set_table(int index, float value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseBinomialPerceptronProto.table)
}
inline void DenseBinomialPerceptronProto::_internal_add_table(float value) {
  table_.Add(value);
}
inline void DenseBinomialPerceptronProto::add_table(float value) {
  _internal_add_table(value);
  // @@protoc_insertion_point(field_add:perceptronix.DenseBinomialPerceptronProto.table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseBinomialPerceptronProto::_internal_table() const {
  return table_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseBinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseBinomialPerceptronProto.table)
  return _internal_table();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseBinomialPerceptronProto::_internal_mutable_table() {
  return &table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseBinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseBinomialPerceptronProto.table)
  return _internal_mutable_table();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SparseBinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool SparseBinomialPerceptronProto::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseBinomialPerceptronProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void SparseBinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SparseBinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseBinomialPerceptronProto.metadata)
  return _internal_metadata();
}
inline void SparseBinomialPerceptronProto::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseBinomialPerceptronProto.metadata)
}
inline std::string* SparseBinomialPerceptronProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseBinomialPerceptronProto.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& SparseBinomialPerceptronProto::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void SparseBinomialPerceptronProto::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparseBinomialPerceptronProto::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perceptronix.SparseBinomialPerceptronProto.metadata)
}
inline void SparseBinomialPerceptronProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseBinomialPerceptronProto.metadata)
}
inline void SparseBinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseBinomialPerceptronProto.metadata)
}
inline std::string* SparseBinomialPerceptronProto::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparseBinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseBinomialPerceptronProto.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparseBinomialPerceptronProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseBinomialPerceptronProto.metadata)
}

// required float bias = 2;
inline bool SparseBinomialPerceptronProto::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SparseBinomialPerceptronProto::has_bias() const {
  return _internal_has_bias();
}
inline void SparseBinomialPerceptronProto::clear_bias() {
  bias_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SparseBinomialPerceptronProto::_internal_bias() const {
  return bias_;
}
inline float SparseBinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseBinomialPerceptronProto.bias)
  return _internal_bias();
}
inline void SparseBinomialPerceptronProto::_internal_set_bias(float value) {
  _has_bits_[0] |= 0x00000002u;
  bias_ = value;
}
inline void SparseBinomialPerceptronProto::set_bias(float value) {
  _internal_set_bias(value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseBinomialPerceptronProto.bias)
}

// map<string, float> table = 3;
inline int SparseBinomialPerceptronProto::_internal_table_size() const {
  return table_.size();
}
inline int SparseBinomialPerceptronProto::table_size() const {
  return _internal_table_size();
}
inline void SparseBinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
SparseBinomialPerceptronProto::_internal_table() const {
  return table_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
SparseBinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseBinomialPerceptronProto.table)
  return _internal_table();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
SparseBinomialPerceptronProto::_internal_mutable_table() {
  return table_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
SparseBinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseBinomialPerceptronProto.table)
  return _internal_mutable_table();
}

// -------------------------------------------------------------------

// DenseInnerTableProto

// repeated float table = 1;
inline int DenseInnerTableProto::_internal_table_size() const {
  return table_.size();
}
inline int DenseInnerTableProto::table_size() const {
  return _internal_table_size();
}
inline void DenseInnerTableProto::clear_table() {
  table_.Clear();
}
inline float DenseInnerTableProto::_internal_table(int index) const {
  return table_.Get(index);
}
inline float DenseInnerTableProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseInnerTableProto.table)
  return _internal_table(index);
}
inline void DenseInnerTableProto::set_table(int index, float value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseInnerTableProto.table)
}
inline void DenseInnerTableProto::_internal_add_table(float value) {
  table_.Add(value);
}
inline void DenseInnerTableProto::add_table(float value) {
  _internal_add_table(value);
  // @@protoc_insertion_point(field_add:perceptronix.DenseInnerTableProto.table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseInnerTableProto::_internal_table() const {
  return table_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DenseInnerTableProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseInnerTableProto.table)
  return _internal_table();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseInnerTableProto::_internal_mutable_table() {
  return &table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DenseInnerTableProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseInnerTableProto.table)
  return _internal_mutable_table();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SparseInnerTableProto

// map<string, float> table = 1;
inline int SparseInnerTableProto::_internal_table_size() const {
  return table_.size();
}
inline int SparseInnerTableProto::table_size() const {
  return _internal_table_size();
}
inline void SparseInnerTableProto::clear_table() {
  table_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
SparseInnerTableProto::_internal_table() const {
  return table_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
SparseInnerTableProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseInnerTableProto.table)
  return _internal_table();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
SparseInnerTableProto::_internal_mutable_table() {
  return table_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
SparseInnerTableProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseInnerTableProto.table)
  return _internal_mutable_table();
}

// -------------------------------------------------------------------

// DenseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool DenseMultinomialPerceptronProto::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DenseMultinomialPerceptronProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void DenseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DenseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.metadata)
  return _internal_metadata();
}
inline void DenseMultinomialPerceptronProto::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
inline std::string* DenseMultinomialPerceptronProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& DenseMultinomialPerceptronProto::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void DenseMultinomialPerceptronProto::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DenseMultinomialPerceptronProto::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
inline void DenseMultinomialPerceptronProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
inline void DenseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.DenseMultinomialPerceptronProto.metadata)
}
inline std::string* DenseMultinomialPerceptronProto::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DenseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseMultinomialPerceptronProto.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DenseMultinomialPerceptronProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
inline bool DenseMultinomialPerceptronProto::_internal_has_inner_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DenseMultinomialPerceptronProto::has_inner_size() const {
  return _internal_has_inner_size();
}
inline void DenseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DenseMultinomialPerceptronProto::_internal_inner_size() const {
  return inner_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DenseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.inner_size)
  return _internal_inner_size();
}
inline void DenseMultinomialPerceptronProto::_internal_set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  inner_size_ = value;
}
inline void DenseMultinomialPerceptronProto::set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inner_size(value);
  // @@protoc_insertion_point(field_set:perceptronix.DenseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.DenseInnerTableProto bias = 3;
inline bool DenseMultinomialPerceptronProto::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_ != nullptr);
  return value;
}
inline bool DenseMultinomialPerceptronProto::has_bias() const {
  return _internal_has_bias();
}
inline void DenseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != nullptr) bias_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::_internal_bias() const {
  const ::perceptronix::DenseInnerTableProto* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perceptronix::DenseInnerTableProto*>(
      &::perceptronix::_DenseInnerTableProto_default_instance_);
}
inline const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.bias)
  return _internal_bias();
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.DenseMultinomialPerceptronProto.bias)
  _has_bits_[0] &= ~0x00000002u;
  ::perceptronix::DenseInnerTableProto* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::_internal_mutable_bias() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::perceptronix::DenseInnerTableProto>(GetArenaNoVirtual());
    bias_ = p;
  }
  return bias_;
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.bias)
  return _internal_mutable_bias();
}
inline void DenseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::DenseInnerTableProto* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:perceptronix.DenseMultinomialPerceptronProto.bias)
}

// repeated .perceptronix.DenseInnerTableProto table = 4;
inline int DenseMultinomialPerceptronProto::_internal_table_size() const {
  return table_.size();
}
inline int DenseMultinomialPerceptronProto::table_size() const {
  return _internal_table_size();
}
inline void DenseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >*
DenseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:perceptronix.DenseMultinomialPerceptronProto.table)
  return &table_;
}
inline const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::_internal_table(int index) const {
  return table_.Get(index);
}
inline const ::perceptronix::DenseInnerTableProto& DenseMultinomialPerceptronProto::table(int index) const {
  // @@protoc_insertion_point(field_get:perceptronix.DenseMultinomialPerceptronProto.table)
  return _internal_table(index);
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::_internal_add_table() {
  return table_.Add();
}
inline ::perceptronix::DenseInnerTableProto* DenseMultinomialPerceptronProto::add_table() {
  // @@protoc_insertion_point(field_add:perceptronix.DenseMultinomialPerceptronProto.table)
  return _internal_add_table();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perceptronix::DenseInnerTableProto >&
DenseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_list:perceptronix.DenseMultinomialPerceptronProto.table)
  return table_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SparseDenseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool SparseDenseMultinomialPerceptronProto::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseDenseMultinomialPerceptronProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void SparseDenseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SparseDenseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  return _internal_metadata();
}
inline void SparseDenseMultinomialPerceptronProto::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
inline std::string* SparseDenseMultinomialPerceptronProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& SparseDenseMultinomialPerceptronProto::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void SparseDenseMultinomialPerceptronProto::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparseDenseMultinomialPerceptronProto::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
inline void SparseDenseMultinomialPerceptronProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
inline void SparseDenseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}
inline std::string* SparseDenseMultinomialPerceptronProto::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparseDenseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparseDenseMultinomialPerceptronProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseDenseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
inline bool SparseDenseMultinomialPerceptronProto::_internal_has_inner_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SparseDenseMultinomialPerceptronProto::has_inner_size() const {
  return _internal_has_inner_size();
}
inline void SparseDenseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseDenseMultinomialPerceptronProto::_internal_inner_size() const {
  return inner_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseDenseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.inner_size)
  return _internal_inner_size();
}
inline void SparseDenseMultinomialPerceptronProto::_internal_set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  inner_size_ = value;
}
inline void SparseDenseMultinomialPerceptronProto::set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inner_size(value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseDenseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.DenseInnerTableProto bias = 3;
inline bool SparseDenseMultinomialPerceptronProto::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_ != nullptr);
  return value;
}
inline bool SparseDenseMultinomialPerceptronProto::has_bias() const {
  return _internal_has_bias();
}
inline void SparseDenseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != nullptr) bias_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perceptronix::DenseInnerTableProto& SparseDenseMultinomialPerceptronProto::_internal_bias() const {
  const ::perceptronix::DenseInnerTableProto* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perceptronix::DenseInnerTableProto*>(
      &::perceptronix::_DenseInnerTableProto_default_instance_);
}
inline const ::perceptronix::DenseInnerTableProto& SparseDenseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  return _internal_bias();
}
inline ::perceptronix::DenseInnerTableProto* SparseDenseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  _has_bits_[0] &= ~0x00000002u;
  ::perceptronix::DenseInnerTableProto* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::perceptronix::DenseInnerTableProto* SparseDenseMultinomialPerceptronProto::_internal_mutable_bias() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::perceptronix::DenseInnerTableProto>(GetArenaNoVirtual());
    bias_ = p;
  }
  return bias_;
}
inline ::perceptronix::DenseInnerTableProto* SparseDenseMultinomialPerceptronProto::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
  return _internal_mutable_bias();
}
inline void SparseDenseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::DenseInnerTableProto* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseDenseMultinomialPerceptronProto.bias)
}

// map<string, .perceptronix.DenseInnerTableProto> table = 4;
inline int SparseDenseMultinomialPerceptronProto::_internal_table_size() const {
  return table_.size();
}
inline int SparseDenseMultinomialPerceptronProto::table_size() const {
  return _internal_table_size();
}
inline void SparseDenseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >&
SparseDenseMultinomialPerceptronProto::_internal_table() const {
  return table_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >&
SparseDenseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseDenseMultinomialPerceptronProto.table)
  return _internal_table();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >*
SparseDenseMultinomialPerceptronProto::_internal_mutable_table() {
  return table_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::DenseInnerTableProto >*
SparseDenseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseDenseMultinomialPerceptronProto.table)
  return _internal_mutable_table();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SparseMultinomialPerceptronProto

// optional string metadata = 1 [default = ""];
inline bool SparseMultinomialPerceptronProto::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SparseMultinomialPerceptronProto::has_metadata() const {
  return _internal_has_metadata();
}
inline void SparseMultinomialPerceptronProto::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SparseMultinomialPerceptronProto::metadata() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.metadata)
  return _internal_metadata();
}
inline void SparseMultinomialPerceptronProto::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
inline std::string* SparseMultinomialPerceptronProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseMultinomialPerceptronProto.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& SparseMultinomialPerceptronProto::_internal_metadata() const {
  return metadata_.GetNoArena();
}
inline void SparseMultinomialPerceptronProto::_internal_set_metadata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SparseMultinomialPerceptronProto::set_metadata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
inline void SparseMultinomialPerceptronProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
inline void SparseMultinomialPerceptronProto::set_metadata(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perceptronix.SparseMultinomialPerceptronProto.metadata)
}
inline std::string* SparseMultinomialPerceptronProto::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  return metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SparseMultinomialPerceptronProto::release_metadata() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseMultinomialPerceptronProto.metadata)
  if (!_internal_has_metadata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return metadata_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SparseMultinomialPerceptronProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseMultinomialPerceptronProto.metadata)
}

// required uint32 inner_size = 2;
inline bool SparseMultinomialPerceptronProto::_internal_has_inner_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SparseMultinomialPerceptronProto::has_inner_size() const {
  return _internal_has_inner_size();
}
inline void SparseMultinomialPerceptronProto::clear_inner_size() {
  inner_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseMultinomialPerceptronProto::_internal_inner_size() const {
  return inner_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseMultinomialPerceptronProto::inner_size() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.inner_size)
  return _internal_inner_size();
}
inline void SparseMultinomialPerceptronProto::_internal_set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  inner_size_ = value;
}
inline void SparseMultinomialPerceptronProto::set_inner_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inner_size(value);
  // @@protoc_insertion_point(field_set:perceptronix.SparseMultinomialPerceptronProto.inner_size)
}

// required .perceptronix.SparseInnerTableProto bias = 3;
inline bool SparseMultinomialPerceptronProto::_internal_has_bias() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bias_ != nullptr);
  return value;
}
inline bool SparseMultinomialPerceptronProto::has_bias() const {
  return _internal_has_bias();
}
inline void SparseMultinomialPerceptronProto::clear_bias() {
  if (bias_ != nullptr) bias_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::perceptronix::SparseInnerTableProto& SparseMultinomialPerceptronProto::_internal_bias() const {
  const ::perceptronix::SparseInnerTableProto* p = bias_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perceptronix::SparseInnerTableProto*>(
      &::perceptronix::_SparseInnerTableProto_default_instance_);
}
inline const ::perceptronix::SparseInnerTableProto& SparseMultinomialPerceptronProto::bias() const {
  // @@protoc_insertion_point(field_get:perceptronix.SparseMultinomialPerceptronProto.bias)
  return _internal_bias();
}
inline ::perceptronix::SparseInnerTableProto* SparseMultinomialPerceptronProto::release_bias() {
  // @@protoc_insertion_point(field_release:perceptronix.SparseMultinomialPerceptronProto.bias)
  _has_bits_[0] &= ~0x00000002u;
  ::perceptronix::SparseInnerTableProto* temp = bias_;
  bias_ = nullptr;
  return temp;
}
inline ::perceptronix::SparseInnerTableProto* SparseMultinomialPerceptronProto::_internal_mutable_bias() {
  _has_bits_[0] |= 0x00000002u;
  if (bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::perceptronix::SparseInnerTableProto>(GetArenaNoVirtual());
    bias_ = p;
  }
  return bias_;
}
inline ::perceptronix::SparseInnerTableProto* SparseMultinomialPerceptronProto::mutable_bias() {
  // @@protoc_insertion_point(field_mutable:perceptronix.SparseMultinomialPerceptronProto.bias)
  return _internal_mutable_bias();
}
inline void SparseMultinomialPerceptronProto::set_allocated_bias(::perceptronix::SparseInnerTableProto* bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bias_;
  }
  if (bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bias, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bias_ = bias;
  // @@protoc_insertion_point(field_set_allocated:perceptronix.SparseMultinomialPerceptronProto.bias)
}

// map<string, .perceptronix.SparseInnerTableProto> table = 4;
inline int SparseMultinomialPerceptronProto::_internal_table_size() const {
  return table_.size();
}
inline int SparseMultinomialPerceptronProto::table_size() const {
  return _internal_table_size();
}
inline void SparseMultinomialPerceptronProto::clear_table() {
  table_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >&
SparseMultinomialPerceptronProto::_internal_table() const {
  return table_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >&
SparseMultinomialPerceptronProto::table() const {
  // @@protoc_insertion_point(field_map:perceptronix.SparseMultinomialPerceptronProto.table)
  return _internal_table();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >*
SparseMultinomialPerceptronProto::_internal_mutable_table() {
  return table_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::perceptronix::SparseInnerTableProto >*
SparseMultinomialPerceptronProto::mutable_table() {
  // @@protoc_insertion_point(field_mutable_map:perceptronix.SparseMultinomialPerceptronProto.table)
  return _internal_mutable_table();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perceptronix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_linear_5fmodel_2eproto
